select * from  p_hroon_t.sneakers_gbp2

drop table  p_hroon_t.sneakers_gbp2;
create table p_hroon_t.sneakers_gbp2 as (

SELECT
	CASE WHEN Byr_CNTRY_ID=3 THEN 'UK' else 'International' End buyer_country,
	CASE WHEN gem.slr_CNTRY_ID=3 THEN 'UK' else 'International' End seller_country,
-- 	GEM.LSTG_ID AS ITEM_ID,
-- 	GEM.CK_TRANS_ID AS TRANSACTION_ID,
-- 	GEM.CK_DATE AS CREATED_DT,
-- 	GEM.LSTG_END_DT AS AUCT_END_DT,
	BRAND,
		CASE WHEN HIST.USEGM_ID = 206 THEN 'B2C' ELSE 'C2C' END BUS_FLAG,
-- MODIFIED/CUSTOMIZED CUTS	
	CASE WHEN Upper(BRND.ASPCT_VLU_NM_BRAND) LIKE ANY ('%YES%', '%MODIFIED%', '%CUSTOMIZED%')
	OR Upper(L.AUCT_TITL) LIKE ANY ('%MODIFIED%', '%CUSTOMIZED%', '%CUSTOM%') 
	THEN ' MODIFIED' ELSE 'NO' end AS MODIFIED_ITEM, -- FILTER FOR "NO" TO GET Non-Modified/Non-Customized  

-- IF ANY OF THE BELOW METHOD IS 1 THEN IT QUALIFIES FOR OFFLINE PAYMENT AND WONT BE AG ELIGIBLE
	CASE WHEN (Cast(FLAGS11 AS INT)& 64)= 64 THEN 1 ELSE 0 END AS DinersClubAccepted,
	CASE WHEN (Cast(ITEM_FLAGS AS INT)& 2048)= 2048  THEN 1 ELSE 0 END AS VisaMCAccepted,
	CASE WHEN (Cast(ITEM_FLAGS AS INT)& 4096)= 4096 THEN 1 ELSE 0 END AS AMEXAccepted,
	CASE WHEN (Cast(ITEM_FLAGS AS INT)& 8192)= 8192 THEN 1 ELSE 0 END AS DiscoverAccepted,
	CASE WHEN (Cast(ITEM_FLAGS AS INT)& 16384)= 16384 THEN 1 ELSE 0 END AS OtherAccepted,
	CASE WHEN (Cast(ITEM_FLAGS AS INT)& 512)= 512 THEN 1 ELSE 0 END AS MoneyOrderAccepted,
	CASE WHEN (Cast(ITEM_FLAGS AS INT)& 1024)= 1024 THEN 1 ELSE 0 END AS PersonalcheckAccepted,
	CASE WHEN (Cast(ITEM_FLAGS AS INT)& 65536)= 65536 THEN 1 ELSE 0 END AS CODAccepted,
	CASE WHEN (Cast(FLAGS9 AS INT)& 134217728)= 134217728 THEN 1 ELSE 0 END AS MoneyBookersAccepted,
	
	CASE
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 75 THEN 'A. <75'
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 100 THEN 'B.75-100'
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 125 THEN 'C.100-125'
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 150 THEN 'D.125-150'
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 175 THEN 'E.150-175'
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 200 THEN 'F.175-200'
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 500 THEN 'G.200-500'
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 1000 THEN 'H.500-1000'
		WHEN Cast(GEM.ITEM_PRICE AS DECIMAL(18,2))  < 2000 THEN 'I.1000-2000'
		ELSE 'D.2000+' END AS
	PRICE_BUCKET,
	
-- 	Cast(GEM.ITEM_PRICE AS DECIMAL(18,2)) * CR.CURNCY_PLAN_RATE AS ITEM_PRICE_USD,
-- 	Cast(GEM.ITEM_PRICE AS DECIMAL(18,2)) AS ITEM_PRICE_GBP,-- FILTER FOR ">=2000" TO GET $2K+ 
	Cast(GEM.ITEM_PRICE AS DECIMAL(18,2)) * Cast(GEM.QTY AS DECIMAL(18,2)) * CR.CURNCY_PLAN_RATE AS GMV_PLAN,
	GEM.QTY AS SI

FROM DW_GEM2_CMN_CK_I GEM 
INNER JOIN SSA_CURNCY_PLAN_RATE_DIM CR ON CR.CURNCY_ID=GEM.LSTG_CURNCY_ID
INNER JOIN ACCESS_VIEWS.DW_CAL_DT AS CAL 
ON GEM.CK_DATE=CAL.CAL_DT and cal.RETAIL_YEAR = 2020
left join (select
	upper(ASPCT_VLU_NM) as BRAND,
	aspct.item_id,
    aspct.auct_end_dt,
    lower(PRDCT_ASPCT_NM) as lcase_aspect_name
    from
    ITEM_ASPCT_CLSSFCTN ASPCT
    where 
    lower(PRDCT_ASPCT_NM) in ('brand' ) and NS_TYPE_CD='df' 
--      and  aspct.auct_end_dt  >=  date '2020-07-01'
) bbase
					ON gem.LSTG_ID= bbase.ITEM_ID AND gem.LSTG_END_DT = bbase.AUCT_END_DT
	
JOIN DW_LSTG_ITEM L ON GEM.LSTG_ID = L.ITEM_ID AND GEM.LSTG_END_DT = L.AUCT_END_DT
INNER JOIN ACCESS_VIEWS.DW_CATEGORY_GROUPINGS CMP
	ON CMP.LEAF_CATEG_ID = GEM.LEAF_CATEG_ID 
	AND CMP.SITE_ID = GEM.LSTG_SITE_ID
	AND CMP.SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)    
-- MODIFIED/NON-MODIFIED TABLES	
LEFT JOIN 
		(
		SELECT ITEM_ID,
			   AUCT_END_DT,
			   Coalesce(Max(ASPCT.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
				FROM
				ITEM_ASPCT_CLSSFCTN ASPCT
				WHERE
				Upper(ASPCT.NS_TYPE_CD) IN ('NF','DF') 
				AND ASPCT.AUCT_END_DT>='2019-12-25'
				AND Upper(ASPCT.PRDCT_ASPCT_NM) LIKE ANY ('%MODIFIED ITEM%','%CUSTOMIZED%')
				GROUP BY 1,2

			UNION 

			SELECT  ITEM_ID,
			   AUCT_END_DT,
			  Coalesce(Max(ASPCT_COLD.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
			FROM
			ITEM_ASPCT_CLSSFCTN_COLD ASPCT_COLD
			WHERE Upper(ASPCT_COLD.NS_TYPE_CD) IN ('NF','DF') 
			AND ASPCT_COLD.AUCT_END_DT>='2019-12-25'
			AND Upper(ASPCT_COLD.PRDCT_ASPCT_NM) LIKE ANY ('%MODIFIED ITEM%','%CUSTOMIZED%')
			GROUP BY 1,2
		) BRND ON GEM.LSTG_ID = BRND.ITEM_ID AND GEM.LSTG_END_DT = BRND.AUCT_END_DT
LEFT  JOIN DW_USEGM_HIST HIST ON HIST.USER_ID=gem.slr_id AND HIST.USEGM_GRP_ID  = 48
AND CASE WHEN gem.ck_date < '2009-10-11' THEN CAST('2009-10-11' AS DATE) ELSE gem.ck_date END BETWEEN HIST.BEG_DATE AND HIST.END_DATE  

WHERE GEM.LSTG_END_DT > To_Date('2019-12-25')
	AND GEM.CK_DATE >= To_Date('2020-01-01')
	AND GEM.LSTG_TYPE_CODE  NOT IN (10, 15)                       
	AND GEM.INCLD_CK_YN_ID = 1              
	AND GEM.ADJ_TYPE_ID <>3
	AND GEM.LSTG_SITE_ID NOT IN (223, -1, -2, -3) 
	AND GEM.LSTG_SITE_ID IN(3) -- US SITE ( CHANGE IT ACCORDING TO USE CASE)
	AND GEM.SLR_CNTRY_ID IN (3) -- US Seller Country (Change it according to use case)
	AND CMP.CATEG_LVL4_ID IN (95672, 15709)  -- Filter for Sneakers category
	AND CAL.AGE_FOR_RTL_WEEK_ID < 0
-- 	AND Cast(GEM.ITEM_PRICE AS DECIMAL(18,2)) * CR.CURNCY_PLAN_RATE >= 100 
	-- PSA end state. All Sneakers $100+;
	GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
	)  ;