
-----------CREATING A BASE WITH ALL WATCHES PSA TRANSACTIONS--------------
DROP TABLE IF EXISTS P_robevans_T.sneakers_BASE;
CREATE TABLE P_robevans_T.sneakers_BASE AS
SELECT 
	CK.ITEM_ID,	
	LC.AUCT_TITL AS LISTING_TITLE,
	LC.LSTG_STATUS_ID,
	CASE 
		WHEN LC.LSTG_STATUS_ID = 2 THEN 'YES'				
		ELSE 'NO'
	END AS ADMIN_ENDED_LISTING,
	LC.AUCT_TYPE_CODE,
	CASE 
		WHEN LC.AUCT_TYPE_CODE IN (7,9) THEN 'YES'				
		ELSE 'NO'
	END AS FIXED_PRICE_LISTING,
	CK.ITEM_VRTN_ID,
	CK.TRANSACTION_ID,	
	OMS.OMS_ORDER_ID,
	CK.CREATED_DT AS CHECKOUT_TRANS_ORDER_DATE,	
	OMS.SRC_CRE_DT AS OMS_ORDER_CREATED_DATE,
	CK.AUCT_END_DT,	
	CASE 
		WHEN OMS.PYMNT_STS_ID = -1 THEN 'UNKNOWN'
		WHEN OMS.PYMNT_STS_ID = 0 THEN 'NOT_FUNDED'
		WHEN OMS.PYMNT_STS_ID = 1 THEN 'PENDING'
		WHEN OMS.PYMNT_STS_ID = 2 THEN 'FUNDED'
		WHEN OMS.PYMNT_STS_ID = 3 THEN 'FAILED'
		WHEN OMS.PYMNT_STS_ID = 4 THEN 'REVERSED'
		WHEN OMS.PYMNT_STS_ID = 5 THEN 'PARTIALLY_FUNDED'
	END AS PAYMENT_STATUS,	
-- GET CANCELLATION STATUS OF THE TRANSACTION 	
	CK.CHECKOUT_STATUS AS CHECKOUT_STATUS_CHECKOUT_TRANS, 	
	CASE 	
		WHEN CK.CHECKOUT_STATUS = 0 THEN 'NOT STARTED'
		WHEN CK.CHECKOUT_STATUS = 1 THEN 'INCOMPLETE'
		WHEN CK.CHECKOUT_STATUS = 2 THEN 'COMPLETE'
		WHEN CK.CHECKOUT_STATUS = 3 THEN 'DISABLED'
	ELSE 'OTHERS' END AS CHECKOUT_STATUS_DETAILED,		
	CK.CK_TRANS_STATE_CD AS CHECKOUT_TRANS_CK_TRANS_STATE_CD,	
	CASE 	
		WHEN CK.CK_TRANS_STATE_CD = 0 THEN 'ACTIVE'
		WHEN CK.CK_TRANS_STATE_CD = 1 THEN 'SELLER CANCELLED'
		WHEN CK.CK_TRANS_STATE_CD = NULL THEN 'ACTIVE-PRIOR TO LTS OF ASSOCIATED CANCELLATION FEATURE'		
	ELSE 'OTHERS' END AS CK_TRANS_STATE_CD_DETAILED,		
	CASE 
        WHEN BBE.CNCL_RQSTR_TYPE_CD = 2 THEN 'BUYER CANCEL' 
        WHEN BBE.CNCL_RQSTR_TYPE_CD =1 OR (BBE.CNCL_RQSTR_TYPE_CD IS NULL AND BBE.MA_DSPT_YN_IND = 'Y') THEN 'SELLER CANCEL' 
        ELSE 'NO CANCEL' 
    END AS BBE_TRANS_TYPE,
	CASE WHEN BBE.ESC_INR_FLAG=1 THEN CAST(1 AS DECIMAL(18,2))
         WHEN BBE.OPEN_INR_FLAG=1 THEN CAST(1 AS DECIMAL(18,2))
--		 WHEN BBE.INR_FLAG  =1 THEN CAST(1 AS DECIMAL(18,2)) 
		 ELSE CAST(0 AS DECIMAL(18,2))
	END AS INR_Y_N,
	BBE.RTRN_ID AS BBE_RETURN_ID,
	BBE.RTRN_OPEN_DT AS BBE_RETURN_OPEN_DATE,
	BBE.RTRN_RSN_CD AS BBE_RETURN_REASON_CODE,
	CK.SELLER_ID AS SELLER_ID,
	USR.USER_SLCTD_ID AS SELLER_NAME,	
	CK.SLR_CNTRY_ID AS SELLER_CNTRY_ID,
	CK.BUYER_ID,
	CASE 
		WHEN CK.SLR_CNTRY_ID IN (3) THEN "US SELLER"
	ELSE "NON UK SELLER" END AS SELLER_CNTRY,	
	CK.ITEM_PRICE AS ITEM_PRICE,	
	CLTG.BRAND_TXT AS CAT_BRAND_TEXT,
	CLTG.ITEM_TITLE_TXT AS CAT_ITEM_TITLE_TEXT,
	
	CAST(CK.gmv_plan_usd AS DECIMAL(18,4)) GMV_USD, 	
	CAST(CK.QUANTITY AS DECIMAL(18,2)) AS SI,	
	CK.CDE_MIN_DT AS BUYER_MIN_EDD_DATE,
	CASE 
		WHEN CK.CDE_MIN_DT > CURRENT_DATE THEN "BUYER EDD NOT PASSED"
	ELSE "BUYER EDD PASSED"
	END AS BUYER_MIN_EDD_PASSED_FLAG,
	CASE
		WHEN DAYOFWEEK( CK.CDE_MIN_DT) = 1 THEN 'SUNDAY'
		WHEN DAYOFWEEK( CK.CDE_MIN_DT) = 2 THEN 'MONDAY'
		WHEN DAYOFWEEK( CK.CDE_MIN_DT) = 3 THEN 'TUESDAY'
		WHEN DAYOFWEEK( CK.CDE_MIN_DT) = 4 THEN 'WEDNESDAY'
		WHEN DAYOFWEEK( CK.CDE_MIN_DT) = 5 THEN 'THURSDAY'
		WHEN DAYOFWEEK( CK.CDE_MIN_DT) = 6 THEN 'FRIDAY'
		WHEN DAYOFWEEK( CK.CDE_MIN_DT) = 7 THEN 'SATURDAY'
	END AS BUYER_MIN_EDD_DT_DOW,
	CK.CDE_MAX_DT AS BUYER_MAX_EDD_DATE,
	CASE
		WHEN DAYOFWEEK(CK.CDE_MAX_DT) = 1 THEN "SUNDAY"
		WHEN DAYOFWEEK(CK.CDE_MAX_DT) = 2 THEN "MONDAY"
		WHEN DAYOFWEEK(CK.CDE_MAX_DT) = 3 THEN "TUESDAY"
		WHEN DAYOFWEEK(CK.CDE_MAX_DT) = 4 THEN "WEDNESDAY"
		WHEN DAYOFWEEK(CK.CDE_MAX_DT) = 5 THEN "THURSDAY"
		WHEN DAYOFWEEK(CK.CDE_MAX_DT) = 6 THEN "FRIDAY"
		WHEN DAYOFWEEK(CK.CDE_MAX_DT) = 7 THEN "SATURDAY"
	END AS BUYER_MAX_EDD_DT_DOW,	
-- 	ADDR.BUYER_ZIP AS BUYER_ZIP,		
	P1.EVENT_ID AS EVENT_ID,	
	CASE 	
		WHEN UPPER(P1.EVENT_ID) LIKE '%_RMA' THEN 'YES'
	ELSE 'NO' END AS RETURN_FLOW_FLAG,	
	P1.PSA_PRTNR_HUB_ID AS HUB_NAME,
	P1.ATHNTCTN_STATUS_NAME AS AUTHENTICATION_STATUS,
	P1.ATHNTCTN_DATE AS AUTHENTICATION_DATE,	
	CONCAT("| ",P2.TRKING_NUM," |") AS TRACKING_NUMBER_TEXT,
	P2.TRKING_NUM,
	P2.SHPMT_FLOW_STEP,
	P2.CARRIER_ID,
	P2.SHIP_DATE,
	P2.SRC_LAST_MDFD_DATE,
	P2.SRC_CREATE_DATE,	
	P3.PKG_RECVD_AT_AUTH_FLAG, 	
	TRK.CARRIER_ACTL_SRVC_USED AS CARRIER_SERVICE_LEVEL,
	CASE
		WHEN DAYOFWEEK(TRK.CARRIER_ESTMTD_DLVRY_DT) = 1 THEN "SUNDAY"
		WHEN DAYOFWEEK(TRK.CARRIER_ESTMTD_DLVRY_DT) = 2 THEN "MONDAY"
		WHEN DAYOFWEEK(TRK.CARRIER_ESTMTD_DLVRY_DT) = 3 THEN "TUESDAY"
		WHEN DAYOFWEEK(TRK.CARRIER_ESTMTD_DLVRY_DT) = 4 THEN "WEDNESDAY"
		WHEN DAYOFWEEK(TRK.CARRIER_ESTMTD_DLVRY_DT) = 5 THEN "THURSDAY"
		WHEN DAYOFWEEK(TRK.CARRIER_ESTMTD_DLVRY_DT) = 6 THEN "FRIDAY"
		WHEN DAYOFWEEK(TRK.CARRIER_ESTMTD_DLVRY_DT) = 7 THEN "SATURDAY"
	END AS CARRIER_ESTMD_DEL_DOW,
	TRK.CARRIER_ESTMTD_DLVRY_DT AS CARRIER_ESTMD_DEL_DATE,
	TRK.DSTNTN_ZIP_TXT AS TRK_ZIP_CODE,
	CASE
		WHEN TRK.DSTNTN_ZIP_TXT LIKE '%45459%' THEN "YES"
		WHEN TRK.DSTNTN_ZIP_TXT IS NULL THEN "BLANK"
		ELSE "NO"
	END AS ON_THE_WAY_TO_HUB_FLAG,
	TRK.CARRIER_DSTNTN_ZIP_TXT AS CARRIER_DST_TRK_ZIP_CODE,
	CASE
		WHEN TRK.CARRIER_DSTNTN_ZIP_TXT LIKE '%45459%' THEN "YES"
		WHEN TRK.CARRIER_DSTNTN_ZIP_TXT IS NULL THEN "BLANK"
		ELSE "NO"
	END AS ON_THE_WAY_TO_HUB_FLAG_CARRIER_ZIP_CODE,	
	CASE
		WHEN LBL.LABEL_PRINTED_ON_EBAY = "YES" THEN "YES"
	ELSE 'NO' END AS LABEL_PRINTED_ON_EBAY_FLAG,
	"BILLING TOOL INFO - CLAIMS INR INFO" AS STR1,
	CASE
		WHEN CLM.CLAIM_FILING_DT IS NOT NULL THEN "INR CLAIMED NEW"
		ELSE "INR NOT CLAIMED NEW"
	END AS INR_CLAIM_FLAG_NEW,
	CLM.CLAIM_FILING_DT,
	CLM.CLAIM_INIT_PARTY_CD,   
	CLM.BYR_CLSR_RSN_CD,    
	CLM.SLR_CLSR_RSN_CD,   
	CLM.CLAIM_CLSR_RSN_CD,
	CLM.SRC_CRE_DT,
    "BILLING TOOL INFO - SELLER REFUND INR INFO" AS STR2,
	CASE
		WHEN PLA.PRICE_LINE_AMT IS NOT NULL THEN "SELLER REFUND"
		ELSE "NO SELLER REFUND"
	END AS SELLER_REFUND_FLAG,	
	PLA.PRICE_LINE_AMT,
	PLA.SRC_CRE_TM,
	PLA.EXTRNL_ID AS PLA_EXTRNL_ID ,
	OMS.OMS_ORDER_ID AS OMS_OMS_ORDER_ID,
	PLA.OMS_ADJSTMNT_ID, 
	PL_EXTRNL_ID ,
	P3.SHPMT_RCVD_DATE as PCKG_AT_AUTH-- WHEN WAS PACKAGE SCANNED AT AUTH
	
FROM ACCESS_VIEWS.DW_CHECKOUT_TRANS CK

-- NEEDED FOR GETTING THE PSA TRANSACTIONS FOR SNEAKERS
INNER JOIN ACCESS_VIEWS.DW_OMS_ORDER OMS
	ON (CASE WHEN INSTR(CK.OMS_EXTRNL_RFRNC_ID,'!') > 0
			   THEN SUBSTR(CK.OMS_EXTRNL_RFRNC_ID,INSTR(CK.OMS_EXTRNL_RFRNC_ID,'!')+1)
			   ELSE CK.OMS_EXTRNL_RFRNC_ID
			   END) = COALESCE(OMS.ORDER_REF_ID,CAST(OMS.OMS_ORDER_ID AS VARCHAR(128)))

-- NEEDED FOR FILTERING GETTING SNEAKERS TRANSACTIONS
INNER JOIN P_CSI_TBS_T.CATG_MAPPING_PROC4 CAT 		
    ON CK.SITE_ID = CAT.SITE_ID 		
    AND CK.LEAF_CATEG_ID = CAT.LEAF_CATEG_ID 		
    AND CAT.CATEG_LVL4_ID in (15709,95672)	 ----Sneakers Category	

-- NEEDED TO GET BUYER ZIP
LEFT JOIN (
SELECT ADDRESS_ID 
FROM ACCESS_VIEWS.DW_USER_ADDRESSES 
WHERE CNTRY_ID IN (3)) ADDR
	ON CK.SHIPPING_ADDRESS_ID = ADDR.ADDRESS_ID

-- NEEDED FOR GETTING THE BRAND INFORMATION FROM TITLE TEXT AND BRAND TEXT
LEFT JOIN (		
	SELECT * FROM ACCESS_VIEWS.CTLG_ITEM_FACT	
	WHERE AUCT_END_DT >= TO_DATE('2021-08-01')	
	AND ITEM_SITE_ID IN (3)	
	AND LEAF_CATEG_ID IN (15709,95672)	 ----Sneakers Category
	AND SLR_CNTRY_ID IN (3)	
	) CLTG	
	ON CK.ITEM_ID = CLTG.ITEM_ID	
	AND CK.AUCT_END_DT = CLTG.AUCT_END_DT	

-- GETTING BUYER / SELLER CANCELLATION STATUS
LEFT JOIN PRS_RESTRICTED_V.EBAY_TRANS_RLTD_EVENT BBE 
	ON (BBE.ITEM_ID = CK.ITEM_ID 
    AND BBE.TRANS_ID = CK.TRANSACTION_ID AND BBE.TRANS_DT >= TO_DATE('2021-08-10'))

-- LISTING NAME
LEFT JOIN
( 
 SELECT  
  ITEM_ID, AUCT_TITL,LSTG_STATUS_ID,AUCT_TYPE_CODE
 FROM ACCESS_VIEWS.DW_LSTG_ITEM 
 WHERE  (AUCT_END_DT>=TO_DATE('2020-07-27') ) 
) AS LC
ON CK.ITEM_ID=LC.ITEM_ID

-- NEEDED FOR GETTING THE PLAN RATES
INNER JOIN ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM LPR 		
	ON LPR.CURNCY_ID = CK.LSTG_CURNCY_ID	

-- GETTING ORDER INFORMATION FROM PSA TABLES
LEFT JOIN ( SELECT * FROM
(SELECT T1.*, (ROW_NUMBER() OVER (PARTITION BY T1.EVENT_ID 
			ORDER BY T1.SRC_LAST_MDFD_DATE DESC)) AS LATEST_UPDATE_FLAG	
			FROM ACCESS_VIEWS.PSA_VENDOR_INTGRTN T1
			WHERE UPPER(T1.EVENT_ID) NOT LIKE '%_RMA' ) TEMP1 WHERE TEMP1.LATEST_UPDATE_FLAG = 1) P1 ON			 --Removing return flow by not considering events with _RMA
CK.OMS_EXTRNL_RFRNC_ID = P1.ORDER_ID					
-- GET THE LATEST PSA SHIPPING STAGE INFORMATION AND TRACKING INFORMATION
LEFT JOIN (
  SELECT * FROM
	(
		SELECT T1.*, (ROW_NUMBER() OVER (PARTITION BY T1.EVENT_ID 
			ORDER BY T1.SRC_LAST_MDFD_DATE DESC)) AS LATEST_UPDATE_FLAG	-- PARITION TO HANDLE THE MULTI QUANTITY TRNX
		FROM ACCESS_VIEWS.PSA_VENDOR_INTGRTN_TRKNG T1 
		WHERE T1.SHPMT_FLOW_STEP IS NULL 			-- SELLER TO AUTH LEG INFO
		AND UPPER(T1.EVENT_ID) NOT LIKE '%_RMA' 	-- REMOVE RETURN FLOW ROWS
	) TEMP1 WHERE TEMP1.LATEST_UPDATE_FLAG = 1				
)  P2 ON ( P1.EVENT_ID = P2.EVENT_ID )

-- SHIPPING INFORMATION CORRESPONDING TO TRACKING NUMBER
LEFT JOIN (
	SELECT * FROM
	(	SELECT *, (ROW_NUMBER() OVER (PARTITION BY SHIPPER_TRKING_ID ORDER BY CRE_DATE DESC)) AS LATEST_UPDATE_FLAG
		FROM ACCESS_VIEWS.DW_SHPMT_TRKING_DTL WHERE CRE_DATE >= TO_DATE('2021-08-10')				-- CHANGE THE DATA TO CATEGORY PSA LAUNCH DATE
	) TEMP1 WHERE TEMP1.LATEST_UPDATE_FLAG = 1
)  TRK ON ( P2.TRKING_NUM = TRK.SHIPPER_TRKING_ID)

-- PSA - VENDOR INTEGRATION PACKAGING INFORMATION CHECK 
LEFT JOIN 
(
SELECT * FROM (
SELECT EVENT_ID,"YES" AS PKG_RECVD_AT_AUTH_FLAG, SHPMT_RCVD_DATE ,
ROW_NUMBER() OVER (PARTITION BY EVENT_ID ORDER BY SRC_LAST_MDFD_DATE ASC) AS LATEST_UPDATE_FLAG
FROM ACCESS_VIEWS.PSA_VENDOR_INTGRTN_PCKG
) TEMP1 WHERE TEMP1.LATEST_UPDATE_FLAG = 1
)
P3 ON ( P1.EVENT_ID = P3.EVENT_ID )

-- SHIPPING LABEL INFORMATION - TO CHECK IF THE LABEL IS PRINTED USING EBAY PLATFORM OR NOT. 
LEFT JOIN (
SELECT DISTINCT CARRIER_TRKING_ID, "YES" AS LABEL_PRINTED_ON_EBAY FROM ACCESS_VIEWS.DW_SHIPMENT 
WHERE CREATION_DT >= TO_DATE('2021-08-10')
) LBL ON P2.TRKING_NUM = LBL.CARRIER_TRKING_ID

-- GET BUYER INITIATED INR CLAIM INFO FROM BILLING TOOL TEAM PROVIDED TABLE DW_ODR_CPS_CLAIM
LEFT JOIN 
(
SELECT * FROM ACCESS_VIEWS.DW_ODR_CPS_CLAIM 
WHERE CLAIM_INIT_PARTY_CD = 2 			--- BUYER IS INITIATING THE CLAIM
  AND CLAIM_TYPE_CD = 1					--- CLAIM TYPE IS INR
) CLM
ON (CK.ITEM_ID = CLM.ITEM_ID AND CK.TRANSACTION_ID = CLM.TRANS_ID)

LEFT JOIN 
(SELECT * FROM 
(
SELECT 
	PLA.EXTRNL_ID ,
	PL.PRICE_LINE_AMT,
	PL.SRC_CRE_TM,
	PLA.OMS_ADJSTMNT_ID,
	PL.EXTRNL_ID AS PL_EXTRNL_ID,
	(ROW_NUMBER() OVER (PARTITION BY PLA.EXTRNL_ID ORDER BY PL.PRICE_LINE_AMT DESC)) AS LAST_TRANS
FROM DW_OMS_PRICE_LINE PL
LEFT JOIN DW_OMS_PRICE_LINE_ADJSTMNT PLA
ON (PLA.OMS_ADJSTMNT_ID = PL.EXTRNL_ID)
WHERE PL.SRC_CRE_DT > TO_DATE("2020-08-20") AND PL.PRICE_LINE_TYPE_ID = 31
) PLA WHERE LAST_TRANS = 1) PLA
ON ( PLA.EXTRNL_ID = OMS.OMS_ORDER_ID)

-- GETTING SELLER NAME
LEFT JOIN ACCESS_VIEWS.DW_USERS USR		
	ON USR.USER_ID = CK.SELLER_ID

WHERE CK.AUCT_END_DT >= TO_DATE('2021-07-20') 	 	
AND CREATED_DT >= TO_DATE('2021-08-10') ----- Date of PSA launch for Watches
AND CK.TRANS_SITE_ID IN (3)	 ---Transaction site UK
AND oms.SRC_CRE_DT <= (CURRENT_DATE - 29) -----28Days lag metric
AND CK.TRANS_COBRAND_ID IN (0,6,7,2)					
AND UPPER(CK.GMV_INCLD_YN) = 'Y'	--Only includes sanctioned GMV(excludes eBay branded gift cards from Jan 1 2016)
AND UPPER(CK.RPRTD_WACKO_YN) = 'N' --Excluding Wacko
AND GET_JSON_OBJECT(ORDER_DTL1_TXT, '$.PSA') <> 0; --PSA transactions


--------------------POTENTIAL BYPASS TRANSACTIONS-------------------------
DROP TABLE IF EXISTS P_robevans_T.Sneakers_Bypass_orders;
CREATE TABLE P_robevans_T.Sneakers_Bypass_orders AS
SELECT  OMS_ORDER_CREATED_DATE
,COUNT(*) AS BYPASS_TRANS
FROM P_robevans_T.SNEAKERS_BASE
----Conditions to qualify a transaction as potential Bypass 
WHERE UPPER(Return_Flow_Flag)	=UPPER('No') --Consider only forward flow
AND UPPER(Admin_Ended_Listing)=	UPPER('No') --- Not Admin ended listingUSus
AND UPPER(BBE_Trans_type)	=UPPER('No Cancel') ---Not cancelled
AND UPPER(Seller_Refund_Flag)	=UPPER("No Seller Refund") ----Not refund
AND Pkg_Recvd_At_Auth_Flag IS NULL  ---- Package is not recieved at autheticator
AND UPPER(PAYMENT_STATUS)	=UPPER('FUNDED') ---Transaction is funded completely 
AND UPPER(Authentication_status)=	UPPER('NON_VERIFIED')  ---- Authentication status 
AND UPPER(On_the_way_to_Hub_Flag)	<> UPPER("Yes") ---- Not on the way to hub(based on shipping details)
AND UPPER(Buyer_Min_EDD_Passed_Flag)	=UPPER('Buyer EDD passed') ---Passed the estimated delivery date
AND UPPER(INR_Claim_Flag_New)	=UPPER("INR not claimed New")  ----No INR claines against an item 
GROUP BY 1;


--------------------POTENTIAL BYPASS RATE-------------------------
DROP TABLE IF EXISTS P_robevans_T.Sneakers_Bypass_rate;
CREATE TABLE P_robevans_T.Sneakers_Bypass_rate AS
SELECT  
all_trans.OMS_ORDER_CREATED_DATE
,COALESCE((BYPASS_TRANS/COUNT(*)),0) AS  bypass_rate
,COALESCE(BYPASS_TRANS,0) AS Potential_bypass_transactions
,COUNT(*) AS  total_transactions
FROM P_robevans_T.SNEAKERS_BASE all_trans
LEFT JOIN P_robevans_T.Sneakers_Bypass_orders bypass
ON all_trans.OMS_ORDER_CREATED_DATE=bypass.OMS_ORDER_CREATED_DATE
WHERE UPPER(Return_Flow_Flag)	='NO'
GROUP BY all_trans.OMS_ORDER_CREATED_DATE,BYPASS_TRANS ;


--------------------POTENTIAL BYPASS TRANSACTIONS-------------------------
DROP TABLE IF EXISTS  P_robevans_T.Sneakers_Bypass_orders1 
;
CREATE TABLE P_robevans_T.Sneakers_Bypass_orders1 AS
SELECT  *
FROM P_robevans_T.SNEAKERS_BASE
----Conditions to qualify a transaction as potential Bypass 
WHERE UPPER(Return_Flow_Flag)	=UPPER('No') --Consider only forward flow
AND UPPER(Admin_Ended_Listing)=	UPPER('No') --- Not Admin ended listing
AND UPPER(BBE_Trans_type)	=UPPER('No Cancel') ---Not cancelled
AND UPPER(Seller_Refund_Flag)	=UPPER("No Seller Refund") ----Not refund
AND Pkg_Recvd_At_Auth_Flag IS NULL  ---- Package is not recieved at autheticator
AND UPPER(PAYMENT_STATUS)	=UPPER('FUNDED') ---Transaction is funded completely 
AND UPPER(Authentication_status)=	UPPER('NON_VERIFIED')  ---- Authentication status 
AND UPPER(On_the_way_to_Hub_Flag)	<> UPPER("Yes") ---- Not on the way to hub(based on shipping details)
AND UPPER(Buyer_Min_EDD_Passed_Flag)	=UPPER('Buyer EDD passed') ---Passed the estimated delivery date
AND UPPER(INR_Claim_Flag_New)	=UPPER("INR not claimed New")  ----No INR claines against an item 
;

