/*  
Report: Base Code for C2C Key Metrics Tableau Report 
Jira: UKPLAN-278
Requestor: Emma Ashton (C2C Team)
Developer: Gabriella Austin
Descriptoin: The code creates two base tables that feed into the tableau dashboard. They contain the key metrics cut at different time periods, verticals and segments for user deepdives
Date: 04/05/2023
*/



/*************************************************************************************************************** 
CREATE  GMV TABLE THAT WILL BE USED IN THE TABLEAU REPORT
***************************************************************************************************************/

------------------>> Create Logic for QTD and YTD flags <<------------------
DROP TABLE IF EXISTS QTD_LOGIC;
CREATE TEMPORARY TABLE QTD_LOGIC AS
(
SELECT 
	*
	,ROW_NUMBER() OVER (PARTITION BY AGE_FOR_RTL_QTR_ID ORDER BY AGE_FOR_RTL_WEEK_ID) as QTD_FLAG 
FROM (
		SELECT DISTINCT 
			AGE_FOR_RTL_YEAR_ID
			,AGE_FOR_RTL_QTR_ID
			,AGE_FOR_RTL_WEEK_ID 
		FROM 	ACCESS_VIEWS.DW_CAL_DT 
		WHERE 	1=1 
		AND 	AGE_FOR_RTL_WEEK_ID <= -1
		AND 	AGE_FOR_RTL_YEAR_ID >= -5
	)
);

DROP TABLE IF EXISTS YTD_LOGIC;
CREATE TEMPORARY TABLE YTD_LOGIC AS
(
SELECT 
	*
	,ROW_NUMBER() OVER (PARTITION BY AGE_FOR_RTL_YEAR_ID ORDER BY AGE_FOR_RTL_WEEK_ID) as YTD_Flag 
FROM (
		SELECT DISTINCT 
			AGE_FOR_RTL_YEAR_ID
			,AGE_FOR_RTL_WEEK_ID 
		FROM 	ACCESS_VIEWS.DW_CAL_DT 
		WHERE 	1=1 
		AND 	AGE_FOR_RTL_WEEK_ID <= -1
		AND 	AGE_FOR_RTL_YEAR_ID >= -5
	)
);


------------------>> Create Base GMV Table <<------------------
DROP TABLE IF EXISTS BASE_GMV;
CREATE TEMPORARY TABLE BASE_GMV AS (
SELECT	
	CASE 
		WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK = 1 THEN cal.RETAIL_YEAR - 1
		ELSE cal.RETAIL_YEAR END AS RETAIL_YEAR
	,cal.AGE_FOR_RTL_YEAR_ID
	,cal.AGE_FOR_RTL_QTR_ID	 
	,CONCAT(cal.RETAIL_YEAR,'Q',lpad(cal.RTL_QTR_OF_RTL_YEAR_ID,2,'0')) as RETAIL_QUARTER
	,CASE 
		WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK = 1 THEN 52
	  	WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK BETWEEN 2 AND 53 THEN cal.RETAIL_WEEK - 1
		ELSE cal.RETAIL_WEEK END AS RETAIL_WEEK
	,cal.AGE_FOR_RTL_WEEK_ID
	,CASE WHEN cal.AGE_FOR_RTL_WEEK_ID = -1 AND cal.RETAIL_WEEK IN (13,26,39,52) THEN 0 ELSE cal.AGE_FOR_RTL_QTR_ID END AS QTD_FILTER --> needed for qtd logic in below tables
	,CASE WHEN cal.AGE_FOR_RTL_WEEK_ID = -1 AND cal.RETAIL_WEEK = 52 THEN 0 ELSE cal.AGE_FOR_RTL_YEAR_ID END AS YTD_FILTER --> needed for ytd logic in below tables
	,qtd.QTD_FLAG --> gets the cut off week for each quarter
	,ytd.YTD_FLAG --> gets the cut off week for each year
	,tran.SLR_ID
	,tran.ITEM_ID
	,tran.AUCT_START_DT
	,CASE WHEN tran.BYR_CNTRY_ID = 3 THEN 'Dom' ELSE 'CBT' END AS DOM_CBT
	,cat.BSNS_VRTCL_NAME AS Vertical
	,cat.META_CATEG_NAME
	,cat.CATEG_LVL2_NAME
	,cat.CATEG_LVL3_NAME
	,CASE 
		WHEN tran.SELLER_SEGMENT_DETAIL = 'Regular' THEN 'Regular'
		WHEN tran.SELLER_SEGMENT_DETAIL in ('Large Merchant', 'Merchant', 'Entrepreneur') THEN 'Entrepreneur'
		WHEN tran.SELLER_SEGMENT_DETAIL = 'Occasional' THEN 'Occasional'
		WHEN tran.SELLER_SEGMENT_DETAIL in ('UnsuccesfulLister','LapsedLister','FTL') THEN 'NORS'
		WHEN tran.SELLER_SEGMENT_DETAIL in ('FTL') THEN 'New'
		ELSE 'other' END as Segment
	,CASE 	
		WHEN lstg.cndtn_rollup_id = 1 THEN 'New'
		WHEN lstg.cndtn_rollup_id = 2 THEN 'Refurbished'
		WHEN lstg.cndtn_rollup_id = 3 THEN 'Used'
		WHEN lstg.cndtn_rollup_id = 4 THEN 'Not Specified'
		ELSE 'Other'
		END as Item_Cond
	,CASE WHEN lstg.AUCT_TYPE_CD IN (7,9) THEN 'Fixed Price' ELSE 'Auction' END AS Listing_Type
	,tran.GMV20_PLAN                                      	
	,tran.QUANTITY as SI

FROM 		PRS_RESTRICTED_V.SLNG_TRANS_SUPER_FACT tran 

INNER JOIN 	PRS_RESTRICTED_V.SLNG_LSTG_SUPER_FACT lstg
ON 			lstg.ITEM_ID = tran.ITEM_ID

INNER JOIN 	ACCESS_VIEWS.DW_CAL_DT cal 
ON 			cal.CAL_DT = tran.GMV_DT

INNER JOIN 	(	SELECT *											
				FROM ACCESS_VIEWS.DW_CATEGORY_GROUPINGS 									
				WHERE SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)									
			) as cat										
ON 			lstg.LEAF_CATEG_ID = cat.LEAF_CATEG_ID 										
AND 		cat.SITE_ID = 3

INNER JOIN 	QTD_Logic qtd 
ON  		QTD.AGE_FOR_RTL_WEEK_ID = cal.AGE_FOR_RTL_WEEK_ID

INNER JOIN 	YTD_Logic ytd 
ON  		YTD.AGE_FOR_RTL_WEEK_ID = cal.AGE_FOR_RTL_WEEK_ID

WHERE 		1=1
AND 		tran.GMV_DT BETWEEN '2018-12-30' and current_date - 1
AND 		tran.AUCT_END_DT >= '2018-12-30'                                                      	
AND 		tran.CK_WACKO_YN ='N'                                                                                                                          	
AND 		tran.ISCORE = 1	
AND 		tran.SLR_CNTRY_ID = 3
AND 		tran.AUCT_TYPE_CD not IN (10,12,15)
AND 		tran.EU_B2C_C2C_FLAG = 'C2C'
AND			tran.SITE_ID = 3
AND  		cal.AGE_FOR_RTL_WEEK_ID <= -1
AND 		cal.AGE_FOR_RTL_YEAR_ID >= -4

ORDER BY 	1,2,3,4,5,6
);


------------------>> Create timeframe tables <<------------------
--> Weekly
DROP TABLE IF EXISTS WEEK_GMV;
CREATE TEMPORARY TABLE WEEK_GMV AS (
SELECT 
	'Week' as Timeframe
	,RETAIL_YEAR
	,RETAIL_WEEK AS Grouping_TF
	,AGE_FOR_RTL_WEEK_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(GMV20_PLAN) AS GMV_TOTAL
	,SUM(CASE WHEN DOM_CBT = 'Dom' THEN GMV20_PLAN END) AS GMV_DOM
	,SUM(CASE WHEN DOM_CBT = 'CBT' THEN GMV20_PLAN END) AS GMV_CBT
	,SUM(SI) AS SI
	,SUM(GMV20_PLAN)/SUM(SI) AS ASP

FROM BASE_GMV 
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> Quarterly
DROP TABLE IF EXISTS Quarter_GMV;
CREATE TEMPORARY TABLE Quarter_GMV AS (
SELECT 
	'Quarter' as Timeframe
	,RETAIL_YEAR
	,RETAIL_QUARTER AS Grouping_TF
	,AGE_FOR_RTL_QTR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(GMV20_PLAN) AS GMV_TOTAL
	,SUM(CASE WHEN DOM_CBT = 'Dom' THEN GMV20_PLAN END) AS GMV_DOM
	,SUM(CASE WHEN DOM_CBT = 'CBT' THEN GMV20_PLAN END) AS GMV_CBT
	,SUM(SI) AS SI
	,SUM(GMV20_PLAN)/SUM(SI) AS ASP

FROM BASE_GMV 
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> QTD
DROP TABLE IF EXISTS QTD_GMV;
CREATE TEMPORARY TABLE QTD_GMV AS (
SELECT 
	'QTD' as Timeframe
	,RETAIL_YEAR
	,RETAIL_QUARTER AS Grouping_TF
	,AGE_FOR_RTL_QTR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(GMV20_PLAN) AS GMV_TOTAL
	,SUM(CASE WHEN DOM_CBT = 'Dom' THEN GMV20_PLAN END) AS GMV_DOM
	,SUM(CASE WHEN DOM_CBT = 'CBT' THEN GMV20_PLAN END) AS GMV_CBT
	,SUM(SI) AS SI
	,SUM(GMV20_PLAN)/SUM(SI) AS ASP

FROM BASE_GMV 
WHERE QTD_FLAG <= (SELECT MAX(QTD_FLAG) FROM BASE_GMV WHERE QTD_Filter = 0)
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> YTD
DROP TABLE IF EXISTS YTD_GMV;
CREATE TEMPORARY TABLE YTD_GMV AS (
SELECT 
	'YTD' as Timeframe
	,RETAIL_YEAR
	,RETAIL_YEAR AS Grouping_TF
	,AGE_FOR_RTL_YEAR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(GMV20_PLAN) AS GMV_TOTAL
	,SUM(CASE WHEN DOM_CBT = 'Dom' THEN GMV20_PLAN END) AS GMV_DOM
	,SUM(CASE WHEN DOM_CBT = 'CBT' THEN GMV20_PLAN END) AS GMV_CBT
	,SUM(SI) AS SI
	,SUM(GMV20_PLAN)/SUM(SI) AS ASP

FROM BASE_GMV 
WHERE YTD_FLAG <= (SELECT MAX(YTD_FLAG) FROM BASE_GMV WHERE YTD_Filter = 0)
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> YEAR 
DROP TABLE IF EXISTS YEAR_GMV;
CREATE TEMPORARY TABLE YEAR_GMV AS (
SELECT 
	'YEAR' as Timeframe
	,RETAIL_YEAR
	,RETAIL_YEAR AS Grouping_TF
	,AGE_FOR_RTL_YEAR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(GMV20_PLAN) AS GMV_TOTAL
	,SUM(CASE WHEN DOM_CBT = 'Dom' THEN GMV20_PLAN END) AS GMV_DOM
	,SUM(CASE WHEN DOM_CBT = 'CBT' THEN GMV20_PLAN END) AS GMV_CBT
	,SUM(SI) AS SI
	,SUM(GMV20_PLAN)/SUM(SI) AS ASP

FROM BASE_GMV 
GROUP BY 1,2,3,4,5,6,7,8,9
);


------------------>> Join all GMV tables into one table <<------------------
DROP TABLE IF EXISTS FINAL_GMV;
CREATE TEMPORARY TABLE FINAL_GMV AS (
SELECT * FROM WEEK_GMV
UNION ALL  

SELECT * FROM QUARTER_GMV
UNION ALL  

SELECT * FROM QTD_GMV
UNION ALL  

SELECT * FROM YEAR_GMV
UNION ALL  

SELECT * FROM YTD_GMV
);







/*************************************************************************************************************** 
CREATE FGL TABLE THAT WILL BE JOINED TO THE GMV TABLE
***************************************************************************************************************/

------------------>> Create Base FGL Table <<------------------
DROP TABLE IF EXISTS BASE_FGL;
CREATE TEMPORARY TABLE BASE_FGL AS (
SELECT
	CASE 
		WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK = 1 THEN cal.RETAIL_YEAR - 1
		ELSE cal.RETAIL_YEAR END AS RETAIL_YEAR
	,cal.AGE_FOR_RTL_YEAR_ID
	,cal.AGE_FOR_RTL_QTR_ID	 
	,CONCAT(cal.RETAIL_YEAR,'Q',lpad(cal.RTL_QTR_OF_RTL_YEAR_ID,2,'0')) as RETAIL_QUARTER
	,CASE 
		WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK = 1 THEN 52
	  	WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK BETWEEN 2 AND 53 THEN cal.RETAIL_WEEK - 1
		ELSE cal.RETAIL_WEEK END AS RETAIL_WEEK
	,cal.AGE_FOR_RTL_WEEK_ID
	,CASE WHEN cal.AGE_FOR_RTL_WEEK_ID = -1 AND cal.RETAIL_WEEK IN (13,26,39,52) THEN 0 ELSE cal.AGE_FOR_RTL_QTR_ID END AS QTD_FILTER --> needed for qtd logic in below tables
	,CASE WHEN cal.AGE_FOR_RTL_WEEK_ID = -1 AND cal.RETAIL_WEEK = 52 THEN 0 ELSE cal.AGE_FOR_RTL_YEAR_ID END AS YTD_FILTER --> needed for ytd logic in below tables
	,qtd.QTD_FLAG --> gets the cut off week for each quarter
	,ytd.YTD_FLAG --> gets the cut off week for each year
	,lstg.SLR_ID
	,lstg.ITEM_ID
	,lstg.AUCT_START_DT
	,cat.BSNS_VRTCL_NAME AS Vertical
	,cat.META_CATEG_NAME
	,cat.CATEG_LVL2_NAME
	,cat.CATEG_LVL3_NAME
	,CASE 
		WHEN lstg.SELLER_SEGMENT_DETAIL = 'Regular' THEN 'Regular'
		WHEN lstg.SELLER_SEGMENT_DETAIL in ('Large Merchant', 'Merchant', 'Entrepreneur') THEN 'Entrepreneur'
		WHEN lstg.SELLER_SEGMENT_DETAIL = 'Occasional' THEN 'Occasional'
		WHEN lstg.SELLER_SEGMENT_DETAIL in ('UnsuccesfulLister','LapsedLister','FTL') THEN 'NORS'
		WHEN lstg.SELLER_SEGMENT_DETAIL in ('FTL') THEN 'New'
		ELSE 'other' end as segment
	,CASE 	
		WHEN lstg.cndtn_rollup_id = 1 THEN 'New'
		WHEN lstg.cndtn_rollup_id = 2 THEN 'Refurbished'
		WHEN lstg.cndtn_rollup_id = 3 THEN 'Used'
		WHEN lstg.cndtn_rollup_id = 4 THEN 'Not Specified'
		ELSE 'Other'
		END as Item_Cond
	,CASE WHEN lstg.AUCT_TYPE_CD IN (7,9) THEN 'Fixed Price' ELSE 'Auction' END AS Listing_Type

FROM 		PRS_RESTRICTED_V.SLNG_LSTG_SUPER_FACT lstg

INNER JOIN 	ACCESS_VIEWS.DW_CAL_DT cal 
ON 			cal.CAL_DT = lstg.AUCT_START_DT	

INNER JOIN 	(	SELECT *											
				FROM ACCESS_VIEWS.DW_CATEGORY_GROUPINGS 									
				WHERE SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)									
			) as cat										
ON 			lstg.LEAF_CATEG_ID = cat.leaf_categ_id 										
AND 		cat.site_id = 3

INNER JOIN 	QTD_Logic qtd 
ON  		QTD.AGE_FOR_RTL_WEEK_ID = cal.AGE_FOR_RTL_WEEK_ID

INNER JOIN 	YTD_Logic ytd 
ON  		YTD.AGE_FOR_RTL_WEEK_ID = cal.AGE_FOR_RTL_WEEK_ID

WHERE 		1=1
AND 		lstg.ISCORE = 1
AND 		lstg.RELIST_UP_FLAG = 0 -- 1st gen only  
AND 		lstg.AUCT_START_DT BETWEEN '2018-12-30' and (current_date - 1)       
AND 		lstg.AUCT_END_DT >= '2018-12-30' 
AND 		lstg.AUCT_TYPE_CD not IN (10,12,15)
AND 		lstg.SLR_CNTRY_ID = 3	
AND			lstg.SLR_SITE_ID = 3
AND 		lstg.EU_B2C_C2C_FLAG = 'C2C'
AND  		cal.AGE_FOR_RTL_WEEK_ID <= -1
AND 		cal.AGE_FOR_RTL_YEAR_ID >= -4

ORDER BY 	1,2,3,4,5,6
);


------------------>> Create timeframe tables <<------------------
--> Weekly
DROP TABLE IF EXISTS WEEK_FGL;
CREATE TEMPORARY TABLE WEEK_FGL AS (
SELECT 
	'Week' as Timeframe
	,RETAIL_YEAR
	,RETAIL_WEEK AS Grouping_TF
	,AGE_FOR_RTL_WEEK_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,COUNT(DISTINCT ITEM_ID) AS FGL

FROM BASE_FGL 
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> Quarterly
DROP TABLE IF EXISTS Quarter_FGL;
CREATE TEMPORARY TABLE Quarter_FGL AS (
SELECT 
	'Quarter' as Timeframe
	,RETAIL_YEAR
	,RETAIL_QUARTER AS Grouping_TF
	,AGE_FOR_RTL_QTR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,COUNT(DISTINCT ITEM_ID) AS FGL

FROM BASE_FGL 
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> QTD
DROP TABLE IF EXISTS QTD_FGL;
CREATE TEMPORARY TABLE QTD_FGL AS (
SELECT 
	'QTD' as Timeframe
	,RETAIL_YEAR
	,RETAIL_QUARTER AS Grouping_TF
	,AGE_FOR_RTL_QTR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,COUNT(DISTINCT ITEM_ID) AS FGL

FROM  BASE_FGL 
WHERE QTD_FLAG <= (SELECT MAX(QTD_FLAG) FROM BASE_FGL WHERE QTD_Filter = 0)
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> YTD
DROP TABLE IF EXISTS YTD_FGL;
CREATE TEMPORARY TABLE YTD_FGL AS (
SELECT 
	'YTD' as Timeframe
	,RETAIL_YEAR
	,RETAIL_YEAR AS Grouping_TF
	,AGE_FOR_RTL_YEAR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,COUNT(DISTINCT ITEM_ID) AS FGL

FROM  BASE_FGL
WHERE YTD_FLAG <= (SELECT MAX(YTD_FLAG) FROM BASE_FGL WHERE YTD_Filter = 0)
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> YEAR 
DROP TABLE IF EXISTS YEAR_FGL;
CREATE TEMPORARY TABLE YEAR_FGL AS (
SELECT 
	'YEAR' as Timeframe
	,RETAIL_YEAR
	,RETAIL_YEAR AS Grouping_TF
	,AGE_FOR_RTL_YEAR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,COUNT(DISTINCT ITEM_ID) AS FGL

FROM BASE_FGL 
GROUP BY 1,2,3,4,5,6,7,8,9
);


------------------>> Join all FGL tables into one table <<------------------
DROP TABLE IF EXISTS FINAL_FGL;
CREATE TEMPORARY TABLE FINAL_FGL AS (
SELECT * FROM WEEK_FGL
UNION ALL  

SELECT * FROM QUARTER_FGL
UNION ALL  

SELECT * FROM QTD_FGL
UNION ALL  

SELECT * FROM YEAR_FGL
UNION ALL  

SELECT * FROM YTD_FGL
);














/*************************************************************************************************************** 
CREATE VI TABLE THAT WILL BE JOINED TO THE GMV TABLE
***************************************************************************************************************/

------------------>> Create Base VI Table <<------------------
DROP TABLE IF EXISTS BASE_VI;
CREATE TEMPORARY TABLE BASE_VI AS (
SELECT
	CASE 
		WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK = 1 THEN cal.RETAIL_YEAR - 1
		ELSE cal.RETAIL_YEAR END AS RETAIL_YEAR
	,cal.AGE_FOR_RTL_YEAR_ID
	,cal.AGE_FOR_RTL_QTR_ID	 
	,CONCAT(cal.RETAIL_YEAR,'Q',lpad(cal.RTL_QTR_OF_RTL_YEAR_ID,2,'0')) as RETAIL_QUARTER
	,CASE 
		WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK = 1 THEN 52
	  	WHEN cal.RETAIL_YEAR <= 2020 AND cal.RETAIL_WEEK BETWEEN 2 AND 53 THEN cal.RETAIL_WEEK - 1
		ELSE cal.RETAIL_WEEK END AS RETAIL_WEEK
	,cal.AGE_FOR_RTL_WEEK_ID
	,CASE WHEN cal.AGE_FOR_RTL_WEEK_ID = -1 AND cal.RETAIL_WEEK IN (13,26,39,52) THEN 0 ELSE cal.AGE_FOR_RTL_QTR_ID END AS QTD_FILTER --> needed for qtd logic in below tables
	,CASE WHEN cal.AGE_FOR_RTL_WEEK_ID = -1 AND cal.RETAIL_WEEK = 52 THEN 0 ELSE cal.AGE_FOR_RTL_YEAR_ID END AS YTD_FILTER --> needed for ytd logic in below tables
	,qtd.QTD_FLAG --> gets the cut off week for each quarter
	,ytd.YTD_FLAG --> gets the cut off week for each year
	,lstg.SLR_ID
	,lstg.ITEM_ID
	,lstg.AUCT_START_DT
	,cat.BSNS_VRTCL_NAME AS Vertical
	,cat.META_CATEG_NAME
	,cat.CATEG_LVL2_NAME
	,cat.CATEG_LVL3_NAME
	,CASE 
		WHEN lstg.SELLER_SEGMENT_DETAIL = 'Regular' THEN 'Regular'
		WHEN lstg.SELLER_SEGMENT_DETAIL in ('Large Merchant', 'Merchant', 'Entrepreneur') THEN 'Entrepreneur'
		WHEN lstg.SELLER_SEGMENT_DETAIL = 'Occasional' THEN 'Occasional'
		WHEN lstg.SELLER_SEGMENT_DETAIL in ('UnsuccesfulLister','LapsedLister','FTL') THEN 'NORS'
		WHEN lstg.SELLER_SEGMENT_DETAIL in ('FTL') THEN 'New'
		ELSE 'other' end as Segment
	,CASE 	
		WHEN lstg.cndtn_rollup_id = 1 THEN 'New'
		WHEN lstg.cndtn_rollup_id = 2 THEN 'Refurbished'
		WHEN lstg.cndtn_rollup_id = 3 THEN 'Used'
		WHEN lstg.cndtn_rollup_id = 4 THEN 'Not Specified'
		ELSE 'Other'
		END as Item_Cond
	,CASE WHEN lstg.AUCT_TYPE_CD IN (7,9) THEN 'Fixed Price' ELSE 'Auction' END AS Listing_Type
	,trfc.SRP_IMPRSN_CNT as SRP_IMP
	,trfc.TTL_VI_CNT as TTL_VI

FROM 		PRS_restricted_V.SLNG_TRFC_SUPER_FACT trfc

LEFT JOIN  	PRS_RESTRICTED_V.SLNG_LSTG_SUPER_FACT lstg 
ON 			trfc.ITEM_ID = lstg.ITEM_ID 

INNER JOIN 	ACCESS_VIEWS.DW_CAL_DT cal 
ON 			cal.CAL_DT = trfc.CAL_DT

INNER JOIN 	(	SELECT *											
				FROM ACCESS_VIEWS.DW_CATEGORY_GROUPINGS 									
				WHERE SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)								
			) as cat										
ON 			trfc.LEAF_CATEG_ID = cat.LEAF_CATEG_ID 										
AND 		cat.SITE_ID = 3 

INNER JOIN 	QTD_Logic qtd 
ON  		QTD.AGE_FOR_RTL_WEEK_ID = cal.AGE_FOR_RTL_WEEK_ID

INNER JOIN 	YTD_Logic ytd 
ON  		YTD.AGE_FOR_RTL_WEEK_ID = cal.AGE_FOR_RTL_WEEK_ID

WHERE  		1=1
AND 		lstg.ISCORE = 1          
AND  		trfc.CAL_DT BETWEEN '2018-12-30' and (current_date - 1)       
AND  		trfc.CAL_DT >= '2018-12-30'
AND 		lstg.SLR_CNTRY_ID = 3
AND 		trfc.SITE_ID = 3
AND 		lstg.RELIST_UP_FLAG = 0 -- 1st gen only  
AND 		lstg.EU_B2C_C2C_FLAG = 'C2C'
AND  		cal.AGE_FOR_RTL_WEEK_ID <= -1
AND 		cal.AGE_FOR_RTL_YEAR_ID >= -4

ORDER BY 	1,2,3,4,5,6
);


------------------>> Create timeframe tables <<------------------
--> Weekly
DROP TABLE IF EXISTS WEEK_VI;
CREATE TEMPORARY TABLE WEEK_VI AS (
SELECT 
	'Week' as Timeframe
	,RETAIL_YEAR
	,RETAIL_WEEK AS Grouping_TF
	,AGE_FOR_RTL_WEEK_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(TTL_VI) as TTL_VI

FROM BASE_VI 
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> Quarterly
DROP TABLE IF EXISTS Quarter_VI;
CREATE TEMPORARY TABLE Quarter_VI AS (
SELECT 
	'Quarter' as Timeframe
	,RETAIL_YEAR
	,RETAIL_QUARTER AS Grouping_TF
	,AGE_FOR_RTL_QTR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(TTL_VI) as TTL_VI

FROM BASE_VI 
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> QTD
DROP TABLE IF EXISTS QTD_VI;
CREATE TEMPORARY TABLE QTD_VI AS (
SELECT 
	'QTD' as Timeframe
	,RETAIL_YEAR
	,RETAIL_QUARTER AS Grouping_TF
	,AGE_FOR_RTL_QTR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(TTL_VI) as TTL_VI

FROM  BASE_VI 
WHERE QTD_FLAG <= (SELECT MAX(QTD_FLAG) FROM BASE_VI WHERE QTD_Filter = 0)
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> YTD
DROP TABLE IF EXISTS YTD_VI;
CREATE TEMPORARY TABLE YTD_VI AS (
SELECT 
	'YTD' as Timeframe
	,RETAIL_YEAR
	,RETAIL_YEAR AS Grouping_TF
	,AGE_FOR_RTL_YEAR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(TTL_VI) as TTL_VI

FROM  BASE_VI
WHERE YTD_FLAG <= (SELECT MAX(YTD_FLAG) FROM BASE_VI WHERE YTD_Filter = 0)
GROUP BY 1,2,3,4,5,6,7,8,9
);

--> YEAR 
DROP TABLE IF EXISTS YEAR_VI;
CREATE TEMPORARY TABLE YEAR_VI AS (
SELECT 
	'YEAR' as Timeframe
	,RETAIL_YEAR
	,RETAIL_YEAR AS Grouping_TF
	,AGE_FOR_RTL_YEAR_ID AS Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,SUM(TTL_VI) as TTL_VI

FROM BASE_VI 
GROUP BY 1,2,3,4,5,6,7,8,9
);


------------------>> Join all FGL tables into one table <<------------------
DROP TABLE IF EXISTS FINAL_VI;
CREATE TEMPORARY TABLE FINAL_VI AS (
SELECT * FROM WEEK_VI
UNION ALL  

SELECT * FROM QUARTER_VI
UNION ALL  

SELECT * FROM QTD_VI
UNION ALL  

SELECT * FROM YEAR_VI
UNION ALL  

SELECT * FROM YTD_VI
);






/*************************************************************************************************************** 
JOIN FGL & TRFC DATA TO GMV BASE TABLE
***************************************************************************************************************/
DROP TABLE IF EXISTS Combined_Data; 
CREATE TEMPORARY TABLE Combined_Data AS (
SELECT 
	 GMV.Timeframe
	,GMV.RETAIL_YEAR
	,GMV.Grouping_TF
	,GMV.Cal_Grouping_TF
	,GMV.Vertical
-- 	,GMV.META_CATEG_NAME
	,GMV.CATEG_LVL2_NAME
-- 	,GMV.CATEG_LVL3_NAME
	,GMV.Segment
	,GMV.Item_Cond
	,GMV.Listing_Type
	,GMV.GMV_TOTAL
	,GMV.GMV_DOM 
	,GMV.GMV_CBT
	,GMV.SI
	,GMV.ASP
	,FGL.FGL
	,VI.TTL_VI AS VI

FROM 		FINAL_GMV GMV 

LEFT JOIN 	FINAL_FGL FGL 
ON  		FGL.Timeframe = GMV.Timeframe
AND 		FGL.RETAIL_YEAR = GMV.RETAIL_YEAR
AND 		FGL.Grouping_TF = GMV.Grouping_TF
AND 		FGL.Cal_Grouping_TF = GMV.Cal_Grouping_TF
AND 		FGL.Vertical = GMV.Vertical
-- AND 		FGL.META_CATEG_NAME = GMV.META_CATEG_NAME
AND 		FGL.CATEG_LVL2_NAME = GMV.CATEG_LVL2_NAME
-- AND 		FGL.CATEG_LVL3_NAME = GMV.CATEG_LVL3_NAME
AND 		FGL.Segment = GMV.Segment
AND 		FGL.Item_Cond = GMV.Item_Cond
AND 		FGL.Listing_Type = GMV.Listing_Type

LEFT JOIN 	FINAL_VI VI 
ON  		VI.Timeframe = GMV.Timeframe
AND 		VI.RETAIL_YEAR = GMV.RETAIL_YEAR
AND 		VI.Grouping_TF = GMV.Grouping_TF
AND 		VI.Cal_Grouping_TF = GMV.Cal_Grouping_TF
AND 		VI.Vertical = GMV.Vertical
-- AND 		VI.META_CATEG_NAME = GMV.META_CATEG_NAME
AND 		VI.CATEG_LVL2_NAME = GMV.CATEG_LVL2_NAME
-- AND 		VI.CATEG_LVL3_NAME = GMV.CATEG_LVL3_NAME
AND 		VI.Segment = GMV.Segment
AND 		VI.Item_Cond = GMV.Item_Cond
AND 		VI.Listing_Type = GMV.Listing_Type
);	
------------------------------------------------------------------------------------------------------------------
-- Pivot metrics into one field, so that it can be used as a field/filter in Tableau
------------------------------------------------------------------------------------------------------------------

------------------>> Base Table 1 <<------------------
DROP TABLE IF EXISTS P_ukplan_report_T.C2C_KEY_MET_TAB_FINAL; 
CREATE TABLE P_ukplan_report_T.C2C_KEY_MET_TAB_FINAL AS (	
SELECT
	 T1.Timeframe
	,T1.Retail_Year
	,T1.Grouping_TF
	,T1.Cal_Grouping_TF
	,T1.Vertical
-- 	,T1.META_CATEG_NAME
	,T1.CATEG_LVL2_NAME
-- 	,T1.CATEG_LVL3_NAME
	,T1.Segment
	,T1.Item_Cond
	,T1.Listing_Type
	,T2.Metric_Name 
	,FLOAT(T2.Metric_Value)
	
FROM Combined_Data T1

LATERAL VIEW

EXPLODE ( 
		MAP( 
			'GMV_Total',GMV_TOTAL
			,'GMV_Domestic',GMV_DOM
			,'GMV_CBT',GMV_CBT
			,'SI',SI
			,'FGL',FGL
			,'VI',VI
			)
		) T2 
AS Metric_Name, Metric_Value
);	
	
	
------------------>> Base Table 2 <<------------------	
DROP TABLE IF EXISTS P_ukplan_report_T.C2C_KEY_MET_TAB_ASP_TABLE;
CREATE TABLE P_ukplan_report_T.C2C_KEY_MET_TAB_ASP_TABLE AS (
SELECT 
	 Timeframe
	,RETAIL_YEAR
	,Grouping_TF
	,Cal_Grouping_TF
	,Vertical
-- 	,META_CATEG_NAME
	,CATEG_LVL2_NAME
-- 	,CATEG_LVL3_NAME
	,Segment
	,Item_Cond
	,Listing_Type
	,GMV_TOTAL
	,SI
	,VI

FROM Combined_Data	
);


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	