-- * 1. average photo count
-- * 2. LL with free shipping
-- * 3. PL %
-- * 4. live listings
-- 5. converted LL
-- 6. conversion rate
-- * 7. avg nbr of char in titles
-- * 8. stagnant listings
-- 9. PLS 

--PLS TABLE

select * from P_CSI_TBS_T.PL_OPS_WKLY 
where slr_id = 1537142199
and month_id = '2022W28'

-- get table of listings and sellers by L2/L3
-- focus seller flag: P_awang_ops_T.seller_ops_83
-- pro trader: P_awang_opt_T.protrader_2021_Q2

-- p_awang_ops_t.item_invent_lstg

drop table if exists p_macheung_t.listing_detail;
create table p_macheung_t.listing_detail as (
SELECT
new_vertical, 
slr_id,
user_slctd_id,
ck.item_id,
length(auct_titl) as auct_titl_length,
photo_count,
meta_categ_name,
categ_lvl2_name,
categ_lvl2_id,
categ_lvl3_name,
categ_lvl3_id,
free_shp_delivery_time,
case when NEW_FREE_SHPNG_IND = 1 then 'Y'
	else 'N'
	end as free_ship_flag,
case when pl.item_id is not null then 'Y'
 	else 'N'
 	end as PL_LSTG_FLAG

FROM DW_LSTG_ITEM CK
left join p_awang_ops_t.item_invent_lstg i on ck.item_id = i.item_id
LEFT JOIN (select 
	item_id
	,NEW_FREE_SHPNG_IND
	,shipping_method as free_shipping_method
	,shpmt_mthd_desc as free_shpmt_mthd_desc
	, case when MAX_DLVRY_TM_IN_HOUR <= 3*24  then '3 days' -- 3 day shipping
	else '>3 days'
	end as free_shp_delivery_time
	from DW_ITEMS_SHIPPING s
	left join DW_SHPMT_MTHD_lkp lkp on s.shipping_method = lkp.SHPMT_MTHD_ID
	where s.new_free_shpng_ind=1
	and lkp.site_id = 3
	and lkp.domstc_yn_id = 1
	qualify row_number() over (partition by item_id order by shipping_method) = 1) fs on fs.item_id=ck.item_id
LEFT JOIN (select item_id from PL_ADS_CMPGN_ITEM where end_ts IS NULL group by 1) pl on pl.item_id = ck.item_id 
INNER JOIN DW_CATEGORY_GROUPINGS CAT ON CAT.LEAF_CATEG_ID = Ck.LEAF_CATEG_ID AND CAT.SITE_ID = CK.ITEM_SITE_ID and cat.site_id = 3 
INNER JOIN DW_COUNTRIES CN ON CN.CNTRY_ID = CK.SLR_CNTRY_ID
INNER JOIN ACCESS_VIEWS.GLBL_RPRT_GEO_DIM GEO ON CN.REV_ROLLUP_ID = GEO.REV_ROLLUP_ID 
--INNER JOIN DW_CAL_DT CAL ON CK.AUCT_START_DT < CAL.CAL_DT AND CK.AUCT_END_DT >= CAL.CAL_DT  
inner join dw_users u on ck.slr_id = u.user_id
INNER JOIN ( select USEGM_GRP_ID,USEGM_ID,END_DATE,USER_ID,BEG_DATE from DW_USEGM_HIST where 
        USEGM_GRP_ID = 48 
        AND USEGM_ID = 206 
        AND END_DATE >= '2015-12-30' group by 1,2,3,4,5   )AS HIST 
        ON HIST.USER_ID = CK.SLR_ID
        AND CURRENT_DATE BETWEEN HIST.BEG_DATE AND HIST.END_DATE

where ck.auct_end_dt >= current_date
and CK.WACKO_YN = 'N'     

AND CK.AUCT_TYPE_CODE NOT IN (10,15)
AND CK.ITEM_SITE_ID = 3
and CK.SLR_CNTRY_ID = 3  
and new_vertical in ('Home & Garden')
--AND cal.RETAIL_YEAR in (2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14
);


---============STAGANT LISTING SECTION===========================

-- listing, last sale date
drop table if exists p_macheung_t.last_sale_date;
create table p_macheung_t.last_sale_date as (
SELECT
   ck.item_id,
   'Y' as last_90_days,
SUM(CK.QUANTITY) AS BI
    ,SUM(GMV_PLAN_USD) AS GMV
   FROM  DW_CHECKOUT_TRANS ck 
    INNER JOIN ( select CURNCY_PLAN_RATE,CURNCY_ID from  ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM group by 1,2)AS SSA 
        ON SSA.CURNCY_ID = CK.LSTG_CURNCY_ID     
    INNER JOIN p_macheung_t.listing_detail l on ck.item_id = l.item_id  
    INNER JOIN ( select meta_categ_id, CATEG_LVL2_ID, categ_lvl2_name, categ_lvl3_name, categ_lvl3_id,LEAF_CATEG_ID,SITE_ID,BSNS_VRTCL_NAME   from ACCESS_VIEWS.DW_CATEGORY_GROUPINGS group by 1,2,3,4,5,6,7,8 )  AS CAT
        ON CK.LEAF_CATEG_ID = CAT.LEAF_CATEG_ID
        AND CK.SITE_ID = CAT.SITE_ID
        
    INNER JOIN ACCESS_VIEWS.DW_CAL_DT AS CAL
        ON CAL.CAL_DT = CK.GMV_DT
        AND CAL.RETAIL_YEAR in (2022) 
		and age_for_rtl_week_id <= -1 
		and CAL_DT between (current_date - 90) and current_date
    INNER JOIN DW_USERS u on ck.seller_id = u.user_id   
    INNER JOIN ( select USEGM_GRP_ID,USEGM_ID,END_DATE,USER_ID,BEG_DATE from DW_USEGM_HIST where 
        USEGM_GRP_ID = 48 
        AND USEGM_ID = 206 -- B2C only sellers
        AND END_DATE >= '2015-12-30' group by 1,2,3,4,5   )AS HIST 
        ON HIST.USER_ID = CK.SELLER_ID
        AND CK.CREATED_DT BETWEEN HIST.BEG_DATE AND HIST.END_DATE
     

WHERE 1=1
and  SLR_CNTRY_ID = 3 --UK sellers
        AND BYR_CNTRY_ID = 3 --UK buyers
        AND SLR_CNTRY_ID = BYR_CNTRY_ID --DOM
        AND RPRTD_WACKO_YN = 'N'
        AND CK.AUCT_END_DT >= '2017-09-20'
        AND CREATED_DT >= '2017-09-20'  
     GROUP BY 1);

-- stagnant listing table
drop table if exists p_macheung_t.hg_stagnant;
create table p_macheung_t.hg_stagnant as (
select
lstg.item_id,
case when last_90_days = 'Y' then 'N'  -- any stagnant listings flagged as not relisted
	when RELIST_UP_FLAG = 1 then 'Y'
	else 'N'
	end as Relist_Flag,
case when last_90_days = 'Y' then 'N'
	when current_date - auct_start_dt < 90 then 'N'          -- any new listings flagged as not stagnant
	else 'Y'
	end as Stagnation_Flag,
case when LSTG_GEN_TYPE_ID = 2 then 'Y'
	else 'N'
	end as Sell_Similar_Flag

from DW_LSTG_ITEM lstg
inner join p_macheung_t.listing_detail m on lstg.item_id = m.item_id
left join (select parent_item_id, LSTG_GEN_TYPE_ID from DW_LSTG_GEN where LSTG_GEN_TYPE_ID = 2 group by 1,2) a on lstg.item_id = a.parent_item_id
left join p_macheung_t.last_sale_date ls on lstg.item_id = ls.item_id
);

-- data check
-- select * from p_macheung_t.hg_stagnant where item_id =115175444844;
-- select * from p_macheung_t.stagnant_flag where item_id =115175444844;
-- select * from DW_LSTG_GEN where item_id = 115175444844

drop table if exists p_macheung_t.stagnant_flag;
create table p_macheung_t.stagnant_flag 
AS (
select 
new_vertical, 
slr_id,
user_slctd_id,
m.item_id,
auct_titl_length,
photo_count,
meta_categ_name,
categ_lvl2_name,
categ_lvl2_id,
categ_lvl3_name,
categ_lvl3_id,
free_shp_delivery_time,
free_ship_flag,
PL_LSTG_FLAG,
case when Sell_Similar_Flag = 'Y' then 'Relisted'
	when Stagnation_Flag = 'Y' then 'Stagnant'
	when Relist_Flag = 'Y' then 'Relisted'
	else 'Not Stagnant'
	end as Stagnant_Flag
from p_macheung_t.listing_detail m
-- stagnant listing 
LEFT JOIN p_macheung_t.hg_stagnant s on s.item_id = m.item_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
);

-- 6. conversion rate

-- GMV query if needed
drop table if exists p_macheung_t.converted_lstg;
create table p_macheung_t.converted_lstg as(
select
base.item_id
,'Y' as converted_lstg
,sum(GMV20_plan) as GMV
,sum(GMV20_sold_quantity) as BI


from prs_restricted_v.slng_trans_super_fact ck	

inner join p_macheung_t.listing_detail base on ck.item_id =base.item_id

inner join (
	select meta_categ_name,meta_categ_id,categ_lvl2_id,categ_lvl2_name,categ_lvl3_id,categ_lvl3_name,categ_lvl4_id,categ_lvl4_name,leaf_categ_id,leaf_categ_name,site_id
	from access_views.dw_category_groupings 
	where sap_category_id not in (5,7,41,23,-999) 
    group by 1,2,3,4,5,6,7,8,9,10,11) as cat																
on ck.leaf_categ_id = cat.leaf_categ_id and cat.site_id = 3 	

inner join access_views.dw_cal_dt cal 
on ck.GMV_dt=cal.cal_dt 
	and retail_year in (2022)
	and AGE_FOR_RTL_WEEK_ID <= -1

where 
ck.slr_cntry_id = 3 																										
and ck.byr_cntry_id = 3 	
and ck.slr_cntry_id=ck.byr_cntry_id 
and ck.lstg_site_id = 3 
AND ck.iscore = 1	
and ck.rprtd_wacko_yn = 'N'	
and ck.auct_end_dt > '2018-12-31'

group by 1,2);

-- conversion

drop table if exists p_macheung_t.conversion;
create table p_macheung_t.conversion
 as(
select 
base.item_id,
sum(TTL_PRCHS_CNT) as TTL_PRCHS_CNT,
--(sum(store_imprsn_cnt) + sum(SRP_IMPRSN_CNT)) as TTL_IMP,
SUM(ttl_vi_cnt) as TTL_VI
--(sum(TTL_PRCHS_CNT)/SUM(ttl_vi_cnt)) as BI/VI

FROM PRS_restricted_V.SLNG_TRFC_SUPER_FACT slng  
inner join p_macheung_t.listing_detail base on slng.item_id =base.item_id

INNER JOIN ACCESS_VIEWS.DW_CAL_DT AS CAL
        ON slng.cal_dt = cal.CAL_DT
		--CAL.CAL_DT = CK.CREATED_DT 
		AND CAL.RETAIL_YEAR in (2022) and age_for_rtl_week_id <= -1 
-- INNER JOIN ( select USEGM_GRP_ID,USEGM_ID,END_DATE,USER_ID,BEG_DATE from DW_USEGM_HIST where 
--         USEGM_GRP_ID = 48 
--         AND USEGM_ID = 206 
--         AND END_DATE >= '2015-12-30' group by 1,2,3,4,5)AS HIST 
--         ON HIST.USER_ID = SLNG.SELLER_ID
--         AND slng.cal_dt BETWEEN HIST.BEG_DATE AND HIST.END_DATE
LEFT JOIN ( select meta_categ_id, meta_categ_name,CATEG_LVL2_ID, categ_lvl2_name, categ_lvl3_name, categ_lvl3_id,LEAF_CATEG_ID,SITE_ID,BSNS_VRTCL_NAME   from ACCESS_VIEWS.DW_CATEGORY_GROUPINGS group by 1,2,3,4,5,6,7,8,9 )  AS CAT
        ON SLNG.LEAF_CATEG_ID = CAT.LEAF_CATEG_ID AND CAT.SITE_ID = 3
        
WHERE 1=1

   		GROUP BY 1);
		
-- TY GMV
drop table if exists p_macheung_t.total_GMV;
create table p_macheung_t.total_GMV as (
SELECT
   ck.item_id,
SUM(CK.QUANTITY) AS BI
    ,SUM(GMV_PLAN_USD) AS GMV
   FROM  DW_CHECKOUT_TRANS ck 
    INNER JOIN ( select CURNCY_PLAN_RATE,CURNCY_ID from  ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM group by 1,2)AS SSA 
        ON SSA.CURNCY_ID = CK.LSTG_CURNCY_ID     
    INNER JOIN p_macheung_t.listing_detail l on ck.item_id = l.item_id  
    INNER JOIN ( select meta_categ_id, CATEG_LVL2_ID, categ_lvl2_name, categ_lvl3_name, categ_lvl3_id,LEAF_CATEG_ID,SITE_ID,BSNS_VRTCL_NAME   from ACCESS_VIEWS.DW_CATEGORY_GROUPINGS group by 1,2,3,4,5,6,7,8 )  AS CAT
        ON CK.LEAF_CATEG_ID = CAT.LEAF_CATEG_ID
        AND CK.SITE_ID = CAT.SITE_ID
        
    INNER JOIN ACCESS_VIEWS.DW_CAL_DT AS CAL
        ON CAL.CAL_DT = CK.GMV_DT
        AND CAL.RETAIL_YEAR in (2022) 
		and age_for_rtl_week_id <= -1 
    INNER JOIN DW_USERS u on ck.seller_id = u.user_id   
    INNER JOIN ( select USEGM_GRP_ID,USEGM_ID,END_DATE,USER_ID,BEG_DATE from DW_USEGM_HIST where 
        USEGM_GRP_ID = 48 
        AND USEGM_ID = 206 -- B2C only sellers
        AND END_DATE >= '2015-12-30' group by 1,2,3,4,5   )AS HIST 
        ON HIST.USER_ID = CK.SELLER_ID
        AND CK.CREATED_DT BETWEEN HIST.BEG_DATE AND HIST.END_DATE
     

WHERE 1=1
and  SLR_CNTRY_ID = 3 --UK sellers
        AND BYR_CNTRY_ID = 3 --UK buyers
        AND SLR_CNTRY_ID = BYR_CNTRY_ID --DOM
        AND RPRTD_WACKO_YN = 'N'
        AND CK.AUCT_END_DT >= '2017-09-20'
        AND CREATED_DT >= '2017-09-20'  
     GROUP BY 1);


-- take base table, join on converted listing flag, conversion rate
drop table if exists p_macheung_t.full_seller_set;
create table p_macheung_t.full_seller_set as
(select distinct
base.*, 
case when focus_flag= 'Y' then 'Y'
	else 'N'
	end as focus_seller_flag,
case when PT_flag= 'Y' then 'Y'
	else 'N'
	end as PT_seller_flag,
case when converted_lstg= 'Y' then 'Y'
	else 'N'
	end as converted_lstg,
CASE WHEN SPS.SPS_SLR_LEVEL_CD = 1 THEN 'eTRS' 
		WHEN SPS.SPS_SLR_LEVEL_CD = 2 THEN 'Above Standard' 
		WHEN SPS.SPS_SLR_LEVEL_CD = 3 THEN 'Standard' 
		WHEN SPS.SPS_SLR_LEVEL_CD = 4 THEN 'Below Standard' 
		ELSE 'No seller standard'
		END AS SELLER_STANDARD,
g.GMV,
g.BI,	
TTL_PRCHS_CNT,
TTL_VI,
(TTL_PRCHS_CNT/TTL_VI) as Conversion
from p_macheung_t.stagnant_flag base
left join p_macheung_t.total_GMV g on base.item_id = g.item_id
LEFT JOIN (select USER_ID,
	SPS_SLR_LEVEL_CD,
	last_eval_Dt from  PRS_RESTRICTED_V.SPS_LEVEL_METRIC_SUM X
	where SPS_EVAL_TYPE_CD = 1 AND SPS_PRGRM_ID = 3 
		group by 1,2,3 
		qualify (row_number() over (partition by user_id order by last_eval_Dt desc))=1) SPS ON base.slr_id = sps.user_id
left join (select seller_id, 'Y' as focus_flag from P_awang_ops_T.seller_ops_83 group by 1,2) a on base.slr_id  = a.seller_id
left join (select user_id, 'Y' as PT_flag from P_awang_opt_T.protrader_2021_Q2 group by 1,2) p on base.slr_id  = p.user_id
left join p_macheung_t.converted_lstg c on base.item_id = c.item_id 
left join p_macheung_t.conversion cv on base.item_id = cv.item_id
);

select count(distinct item_id) from p_macheung_t.stagnant_flag;
select count(distinct item_id) from p_macheung_t.full_seller_set;
select count(*) from p_macheung_t.stagnant_flag;
select count(*) from p_macheung_t.full_seller_set;

--14,442,301 FINAL ITEM ID COUNT


-- data check; GMV, LL by seller (in H&G vertical)
select slr_id, sum(GMV), count(distinct item_id) as LL
from p_macheung_t.full_seller_set
where slr_id in (718898936,218196540)
group by 1;



-- aggregation by seller (top 200)

-- avg GMV = 16k, avg LL is 169  -> 4.6k sellers
-- 1.1k / week ~30k GMV

select count(distinct slr_id)
from (select f.slr_id, user_slctd_id, seller_standard, free_ship_flag, PL_LSTG_FLAG, focus_seller_flag, PT_Seller_Flag, Stagnant_Flag, converted_lstg, categ_lvl2_name, categ_lvl2_id, sum(f.GMV) as GMV, sum(BI) as BI, sum(TTL_PRCHS_CNT) as TTL_PRCHAS_CNT,  sum(TTL_VI) as TTL_VI, avg(auct_titl_length) as avg_auct_titl_length, avg(photo_count) as avg_photo_count, count(distinct f.item_id) as LL
from p_macheung_t.full_seller_set f
inner join (select distinct slr_id 
	from (	select slr_id, sum(GMV) as GMV, count(distinct item_id) as LL from p_macheung_t.full_seller_set group by 1)
	where GMV >= 40000 and LL > 169) s on f.slr_id = s.slr_id
--where PT_SELLER_FLAG = 'N'
--and FOCUS_SELLER_FLAG = 'N'
	group by 1,2,3,4,5,6,7,8,9,10,11)

select * from p_macheung_t.full_seller_set where  PL_LSTG_FLAG ='Y'

-- final output
drop table if exists p_macheung_t.subset_extracted;
create table p_macheung_t.subset_extracted as (
select f.slr_id, 
user_slctd_id, 
seller_standard, 
FOCUS_SELLER_FLAG,
PT_SELLER_FLAG,
--free_ship_flag, 
-- categ_lvl2_name, 
-- categ_lvl2_id,
sum(f.GMV) as GMV, 
sum(BI) as BI, 
sum(TTL_PRCHS_CNT) as TTL_PRCHAS_CNT,  
sum(TTL_VI) as TTL_VI, 
avg(auct_titl_length) as avg_auct_titl_length, 
avg(photo_count) as avg_photo_count,
sum(case when PL_LSTG_FLAG = 'Y' then f.GMV else 0 end) as PL_GMV, 
count(distinct item_id) as LL,
count(case when (free_ship_flag = 'Y' and free_shp_delivery_time = '3 days') then item_id else NULL end) as Freein3_lstg,
count(case when converted_lstg = 'Y' then item_id else NULL end) as converted_lstg,
count(case when PL_LSTG_FLAG = 'Y' then item_id else NULL end) as PL_LSTG,
count(case when free_ship_flag = 'Y' then item_id else NULL end) as free_ship_lstg,
count(case when stagnant_flag = 'Stagnant' then item_id else NULL end) as stagnant_lstg

from p_macheung_t.full_seller_set f
inner join (select distinct slr_id 
	from (	select slr_id, sum(GMV) as GMV, count(distinct item_id) as LL from p_macheung_t.full_seller_set group by 1)
	where GMV >= 16000 and LL > 169) s on f.slr_id = s.slr_id
--where PT_SELLER_FLAG = 'N'
--and FOCUS_SELLER_FLAG = 'N'
	group by 1,2,3,4,5);

-- final output adding region

drop table if exists p_macheung_t.output_region;
create table p_macheung_t.output_region as (
select a.*,
region
from p_macheung_t.subset_extracted a

LEFT JOIN 
		(SELECT 
		user_id,
		PRDCTV_GNDR,
		ACX_USER_AGE_GRP_ID
		FROM PRS_SECURE_V.user_DNA) dna
		ON dna.USER_ID = a.slr_id
		
LEFT JOIN (
			SELECT USER_ID, PSTL_CODE, ZIP_NORM FROM (
					SELECT USER_ID,
					addr.user_cre_Date,
					PSTL_CODE,
					RegExp_Replace(
					Trim(Lower(PSTL_CODE)),
					'[^a-z0-9]+', -- regexp
					''-- , -- replacestring
					 -- 1, -- startposition        0
					) 
				AS ZIP_NORM -- occurrence, 0 = all
			FROM  PRS_SECURE_V.DW_USERS  addr where PSTL_CODE NOT IN ('Deleted')
			)
			QUALIFY Row_Number() Over (PARTITION BY USER_ID ORDER BY user_CRE_DATE DESC) = 1
		) zipc
		ON zipc.user_id = dna.USER_ID
		
left join P_P_UKTrading_VDM_T.P_UK_POSTCODES pst 
		on zipc.zip_norm = pst.postcode);
		
select * from p_macheung_t.output_region limit 100;

-- add PLS and PLA data (data source from PLA team)


-- PLS
select * from P_CSI_TBS_T.SABRANDED_SELLER_EXTRACT_1  limit 10;

select seller_id, sum(TOTAL_REVENUE) as PL_TOTAL_REVENUE, sum(PL_GMV_USD) as PL_GMV_USD, sum(PL_CLICKS) as PL_CLICKS, SUM(PL_IMPRESSIONS) as PL_IMPRESSIONS, SUM(PL_REV_ADRATE) as PL_REV_ADRATE 
from P_CSI_TBS_T.SABRANDED_SELLER_EXTRACT_1 
where LEFT(WEEK_ID,4)=2022  and UPPER(SITE_NAME) = 'UK' and CNTRY = 'UK' group by 1


-- PLA
select * from P_rharrus_T.PLA_Daily_BOB  limit 10;

select seller_id, sum(impressions) as PLA_IMP, sum(clicks) as PLA_CLICKS, SUM(ADS_FEE_USD) as PLA_ADS_SPEND, SUM(GMB_USD) as PLA_GMB

where YEAR(CAL_DT) = 2022 and slr_cntry = 'UK' and slr_cntry_ext = 'United Kingdom' 
group by 1 on seller_id = pla.slr_id


--- FINAL OUTPUT WITH PLA AND PLS

drop table if exists p_macheung_t.output_PLS_PLA;
create table p_macheung_t.output_PLS_PLA as (
select a.*, plac.cmpgn_cnt, pla.PLA_IMP, pla.PLA_CLICKS, pla.PLA_ADS_SPEND, pla.PLA_GMB, pls.PL_TOTAL_REVENUE, PLS.PL_GMV_USD, PLS.PL_CLICKS, PLS.PL_IMPRESSIONS, PLS.PL_REV_ADRATE 
from p_macheung_t.output_region a
--PLS
left join (select seller_id, sum(TOTAL_REVENUE) as PL_TOTAL_REVENUE, sum(PL_GMV_USD) as PL_GMV_USD, sum(PL_CLICKS) as PL_CLICKS, SUM(PL_IMPRESSIONS) as PL_IMPRESSIONS, SUM(PL_REV_ADRATE) as PL_REV_ADRATE 
	from P_CSI_TBS_T.SABRANDED_SELLER_EXTRACT_1 
	where LEFT(WEEK_ID,4)=2022  and UPPER(SITE_NAME) = 'UK' and CNTRY = 'UK' group by 1) PLS
on a.slr_id = pls.seller_id

-- PLA 
left join (select slr_id, sum(impressions) as PLA_IMP, sum(clicks) as PLA_CLICKS, SUM(ADS_FEE_USD) as PLA_ADS_SPEND, SUM(GMB_USD) as PLA_GMB
	from P_rharrus_T.PLA_Daily_BOB
	where YEAR(CAL_DT) = 2022 and slr_cntry = 'UK' and slr_cntry_ext = 'United Kingdom' 
	group by 1) pla on a.slr_id = pla.slr_id

--PLA campaign count
left join (select slr_id, avg(cmpgn_cnt) as cmpgn_cnt from P_rharrus_T.PLA_Daily_BOB where age_for_rtl_week_id = -1 group by 1) plac on plac.slr_id = a.slr_id
);

select count(*) from p_macheung_t.output_PLS_PLA;
select count(*) from p_macheung_t.output_region;

select * from p_macheung_t.output_PLS_PLA where PLA_IMP IS NOT NULL
select count(distinct seller_id) from P_CSI_TBS_T.SABRANDED_SELLER_EXTRACT_1 where UPPER(SITE_NAME) = 'UK'
select count(distinct slr_id) from P_rharrus_T.PLA_Daily_BOB where slr_cntry = 'UK'