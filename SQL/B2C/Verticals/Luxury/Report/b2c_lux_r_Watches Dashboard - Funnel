
---------------------------------------------------------------------------------------------------------------------------------------------------------------
-- select * from p_robevans_t.watches_final where user_slctd_id = 'hooverlimited' where retail_year in (2020) 
-- select * from P_robevans_T.watches_base where retail_year = 2021 and retail_week = 15
drop table if exists P_robevans_T.watches_fm_gmv;

CREATE TABLE P_robevans_T.watches_fm_gmv AS

(select
	cal.retail_year,
	cal.retail_week,
	cal.AGE_FOR_RTL_WEEK_ID,
	categ_lvl4_name,categ_lvl3_name, categ_lvl3_id,	
	categ_lvl4_id,
		CASE
		WHEN (Cast(ITEM_PRICE AS DECIMAL(18,2)) < 1000 ) THEN 'A. £<1000'
		WHEN (Cast(ITEM_PRICE AS DECIMAL(18,2)) < 1250 ) THEN 'B. £1000-1250'
		WHEN (Cast(ITEM_PRICE AS DECIMAL(18,2)) < 1500 ) THEN 'C. £1250-1500'
		WHEN (Cast(ITEM_PRICE AS DECIMAL(18,2)) < 2000 ) THEN 'D. £1500-2000'
		ELSE 'E. £2000+' END AS
	PRICE_BUCKET,
	CASE WHEN CNDTN_ROLLUP_ID = 1 THEN 'New' WHEN CNDTN_ROLLUP_ID = 2 THEN 'Refurbished'  WHEN CNDTN_ROLLUP_ID = 3 THEN 'Used' ELSE 'Not Specified' END AS Item_Cond,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
-- 	case when BYR_CNTRY_ID = 3 the 'UK' else 'International' end as buyer_location,
	SUM(CK.gmv_plan_usd) AS GMV, 
	count(DISTINCT BUYER_ID) as byr_cnt,
	SUM(QUANTITY) AS BI,
	count(distinct(ck.item_id)) as converted_lll,
	GMV/BI as ASP

FROM DW_CHECKOUT_TRANS AS CK

 LEFT JOIN ( select ITEM_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON CK.ITEM_ID = CNDTN.ITEM_ID
-- inner  JOIN ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM LPR 
-- 	ON CK.LSTG_CURNCY_ID = LPR.CURNCY_ID 
INNER JOIN ACCESS_VIEWS.DW_CAL_DT CAL 
	ON CAL.CAL_DT = CK.gmv_dt 
	and retail_year in (2019,2020,2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
	on ck.seller_id = u.user_id
INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = CK.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)   

WHERE 1=1
	AND CK.CK_WACKO_YN  =  'N'
	AND CK.SALE_TYPE NOT IN (10,15)
	and ck.byr_cntry_id =3 
	and ck.SLR_CNTRY_ID = 3
	and cat.CATEG_LVL4_ID in (31387) -- change

	GROUP BY 1,2,3,4,5,6,7,8,9,10

)
	
-- WITH DATA PRIMARY INDEX(seller_id, RETAIL_WEEK, RETAIL_YEAR, categ_lvl2_id);
;



---------------------------------------------------------------------------------------------------------------------------
drop table if exists P_robevans_T.watches_fm_base;
---------------------------------------------------------------------------------------------------------------------------
CREATE TABLE P_robevans_T.watches_fm_base AS

(SELECT
cal.retail_year,
cal.retail_week,
	cal.AGE_FOR_RTL_WEEK_ID,
categ_lvl4_name,
categ_lvl4_id,categ_lvl3_name, categ_lvl3_id,	
		CASE
		WHEN (Cast(ck.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2)) < 1000 ) THEN 'A. £<1000'
		WHEN (Cast(ck.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2)) < 1250 ) THEN 'B. £1000-1250'
		WHEN (Cast(ck.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2)) < 1500 ) THEN 'C. £1250-1500'
		WHEN (Cast(ck.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2)) < 2000 ) THEN 'D. £1500-2000'
		ELSE 'E. £2000+' END AS
	PRICE_BUCKET,
	CASE WHEN CNDTN_ROLLUP_ID = 1 THEN 'New' WHEN CNDTN_ROLLUP_ID = 2 THEN 'Refurbished'  WHEN CNDTN_ROLLUP_ID = 3 THEN 'Used' ELSE 'Not Specified' END AS Item_Cond,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
count(distinct(ck.item_id)) as LL

FROM DW_LSTG_ITEM CK 

 LEFT JOIN ( select ITEM_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON CK.ITEM_ID = CNDTN.ITEM_ID
INNER JOIN DW_LSTG_ITEM D ON ck.ITEM_ID = D.ITEM_ID AND ck.AUCT_END_DT = D.AUCT_END_DT
INNER JOIN DW_CATEGORY_GROUPINGS CAT ON CAT.LEAF_CATEG_ID = Ck.LEAF_CATEG_ID AND CAT.SITE_ID = CK.ITEM_SITE_ID and cat.site_id = 3 
INNER JOIN DW_COUNTRIES CN ON CN.CNTRY_ID = CK.SLR_CNTRY_ID
INNER JOIN ACCESS_VIEWS.GLBL_RPRT_GEO_DIM GEO ON CN.REV_ROLLUP_ID = GEO.REV_ROLLUP_ID 
INNER JOIN DW_CAL_DT CAL ON CK.AUCT_START_DT < CAL.CAL_DT AND CK.AUCT_END_DT >= CAL.CAL_DT AND RETAIL_YEAR in (2019,2020,2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
on ck.slr_id = u.user_id
WHERE ck.WACKO_YN = 'N'                      
AND CK.AUCT_TYPE_CODE NOT IN (10,15)
AND CK.ITEM_SITE_ID = 3
and ck.auct_end_dt >= date '2018-01-01'
and ck.SLR_CNTRY_ID = 3
and cat.CATEG_LVL4_ID in (31387) -- change
group by 1,2,3,4,5,6,7,8,9,10
 );
-- WITH DATA PRIMARY INDEX(slr_id, categ_lvl2_id, retail_year,retail_week);
 
--  COLLECT STATS P_robevans_T.watches_base COLUMN(retail_year,retail_week,slr_id);
---------------------------------------------------------------------------------------------------------------------------
drop table if exists P_robevans_T.watches_fm_vi;
---------------------------------------------------------------------------------------------------------------------------
CREATE TABLE P_robevans_T.watches_fm_vi AS

(SELECT
cal.retail_year,
cal.retail_week,
	cal.AGE_FOR_RTL_WEEK_ID,
categ_lvl4_name,
categ_lvl4_id,categ_lvl3_name, categ_lvl3_id,	
		CASE
		WHEN (Cast(START_PRICE_LSTG_CURNCY AS DECIMAL(18,2)) < 1000 ) THEN 'A. £<1000'
		WHEN (Cast(START_PRICE_LSTG_CURNCY AS DECIMAL(18,2)) < 1250 ) THEN 'B. £1000-1250'
		WHEN (Cast(START_PRICE_LSTG_CURNCY AS DECIMAL(18,2)) < 1500 ) THEN 'C. £1250-1500'
		WHEN (Cast(START_PRICE_LSTG_CURNCY AS DECIMAL(18,2)) < 2000 ) THEN 'D. £1500-2000'
		ELSE 'E. £2000+' END AS
	PRICE_BUCKET,
	CASE WHEN CNDTN_ROLLUP_ID = 1 THEN 'New' WHEN CNDTN_ROLLUP_ID = 2 THEN 'Refurbished'  WHEN CNDTN_ROLLUP_ID = 3 THEN 'Used' ELSE 'Not Specified' END AS Item_Cond,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
sum(SRP_IMPRSN_CNT) as SRP_IMP,
SUM(SRP_VI_CNT) as SRP_VI,
SUM(other_SRC_VI_CNT) as otherVi,
SUM(watch_CNT) as Watches

 FROM PRS_restricted_V.SLNG_TRFC_SUPER_FACT ck
         
    INNER JOIN ACCESS_VIEWS.DW_CATEGORY_GROUPINGS AS CAT
        ON CK.LEAF_CATEG_ID = CAT.LEAF_CATEG_ID
        AND CK.SITE_ID = CAT.SITE_ID and cat.site_id = 3 
    left outer join dw_users u
on ck.seller_id = u.user_id
inner join dw_cal_dt cal on ck.cal_dt = cal.cal_dt AND cal.RETAIL_YEAR in (2019,2020,2021,2022) and AGE_FOR_RTL_WEEK_ID <=-1
inner join (select item_id, START_PRICE_LSTG_CURNCY,BIN_PRICE_LSTG_CURNCY,RSRV_PRICE_LIST_CRNCY, slr_cntry_id from  DW_LSTG_ITEM) i on ck.item_id = i.item_id and SLR_CNTRY_ID = 3
 LEFT JOIN ( select ITEM_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON CK.ITEM_ID = CNDTN.ITEM_ID

    WHERE 1=1
and ck.site_id = 3  
and cat.CATEG_LVL4_ID in (31387) -- change
GROUP BY 1,2,3,4,5,6,7,8,9,10
 )	
-- WITH DATA PRIMARY INDEX(seller_id, categ_lvl2_id, retail_year,retail_week);
 
 ;
--  COLLECT STATS P_robevans_T.watches_vi COLUMN(retail_year,retail_week,seller_id);
-- select * from p_robevans_t.watches_tracker
---------------------------------------------------------------------------------------------------------------------------
drop table if exists p_robevans_t.watches_tracker;
--------------------------------------------------------------------------------------------------------------------------- 

CREATE table p_robevans_t.watches_tracker as

 (SELECT retail_year, retail_week, 	AGE_FOR_RTL_WEEK_ID,categ_lvl4_name, categ_lvl4_id,categ_lvl3_name, categ_lvl3_id,	Item_Cond, bus_flag, PRICE_BUCKET, GMV, BI, byr_cnt, converted_lll, ASP, ll, SRP_IMP, SRP_VI,  otherVi, Watches

FROM (
 
	SELECT retail_year, retail_week, AGE_FOR_RTL_WEEK_ID,categ_lvl4_name, categ_lvl4_id,categ_lvl3_name, categ_lvl3_id,	Item_Cond, bus_flag, 	PRICE_BUCKET,  GMV, BI, byr_cnt, converted_lll, ASP, cast(0 as decimal(38,10)) AS ll, cast(0 as decimal(38,10)) as SRP_IMP, cast(0 as decimal(38,10)) as SRP_VI, cast(0 as decimal(38,10)) as otherVi, cast(0 as decimal(38,10)) AS Watches
		FROM P_robevans_T.watches_fm_gmv

UNION ALL

	SELECT retail_year, retail_week, AGE_FOR_RTL_WEEK_ID,categ_lvl4_name, categ_lvl4_id,  categ_lvl3_name, categ_lvl3_id,	Item_Cond, bus_flag, 	PRICE_BUCKET, 0 AS GMV, 0 AS BI, 0 AS Byr_cnt, 0 AS converted_lll, 0 AS ASP, ll, 0 as SRP_IMP, 0 as SRP_VI, 0 as otherVi, 0 AS Watches
		FROM P_robevans_T.watches_fm_base

UNION ALL

	SELECT retail_year, retail_week,AGE_FOR_RTL_WEEK_ID,categ_lvl4_name, categ_lvl4_id, categ_lvl3_name, categ_lvl3_id,	Item_Cond, bus_flag, 	PRICE_BUCKET, 0 AS GMV, 0 AS BI, 0 AS Byr_cnt, 0 AS converted_lll, 0 AS ASP, 0 AS ll,SRP_IMP,	SRP_VI,	otherVi, Watches
		FROM P_robevans_T.watches_fm_vi
		
		) unio

GROUP BY retail_year, retail_week,AGE_FOR_RTL_WEEK_ID, categ_lvl4_name, categ_lvl4_id, categ_lvl3_name, categ_lvl3_id,	Item_Cond, bus_flag, 	PRICE_BUCKET, GMV, BI, byr_cnt, converted_lll, ASP, ll, SRP_IMP, SRP_VI,  otherVi, Watches
 
 )
 ; 
 
--  WITH DATA PRIMARY INDEX(seller_id, categ_lvl2_id, retail_year,retail_week);
 
--  COLLECT STATS p_robevans_t.aw_d2c_acq_tracker COLUMN(retail_year,retail_week,seller_id);
---------------------------------------------------------------------------------------------------------------------------
-- select * from p_robevans_t.watches_final where retail_year = 2021


