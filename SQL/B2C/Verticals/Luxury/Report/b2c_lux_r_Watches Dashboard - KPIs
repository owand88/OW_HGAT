-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ GMV and LL by GBP limit (>£1000)----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

drop table if exists p_robevans_t.watches_yoy ;
create table p_robevans_t.watches_yoy as (select * from (select
retail_year,
		CASE
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET,  -- change - We just need price tranches > £5k, > £3k, > £2k, £1.5k and < £1.5k
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
-- 	CASE WHEN UPPER(BRND.ASPCT_VLU_NM_BRAND) IN ('MODIFIED', 'CUSTOMIZED','YES') THEN 'MODIFIED' ELSE 'NO' end AS MODIFIED_ITEM,
	count(distinct slr_id) as Seller_Count,
	count(distinct ck.item_id) as LL

FROM DW_LSTG_ITEM AS CK

--         LEFT JOIN 
--                     (
--                     SELECT ITEM_ID,
--                            AUCT_END_DT,
--                            COALESCE(MAX(ASPCT.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
--                             FROM
--                             ITEM_ASPCT_CLSSFCTN ASPCT
--                             WHERE
--                             UPPER(ASPCT.NS_TYPE_CD) IN ('NF','DF') 
--                             AND ASPCT.AUCT_END_DT>='2018-12-26'
--                             AND UPPER(ASPCT.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
--                             GROUP BY 1,2
                            
--                         UNION 
                        
--                         SELECT  ITEM_ID,
--                            AUCT_END_DT,
--                           COALESCE(MAX(ASPCT_COLD.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
--                         FROM
--                         ITEM_ASPCT_CLSSFCTN_COLD ASPCT_COLD
--                         WHERE UPPER(ASPCT_COLD.NS_TYPE_CD) IN ('NF','DF') 
--                         AND ASPCT_COLD.AUCT_END_DT>='2018-12-26'
--                         AND UPPER(ASPCT_COLD.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
--                         GROUP BY 1,2
--                     ) BRND ON CK.ITEM_ID = BRND.ITEM_ID AND CK.AUCT_END_DT = BRND.AUCT_END_DT



 LEFT JOIN ( select ITEM_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON CK.ITEM_ID = CNDTN.ITEM_ID
INNER JOIN DW_COUNTRIES CN ON CN.CNTRY_ID = CK.SLR_CNTRY_ID
INNER JOIN ACCESS_VIEWS.GLBL_RPRT_GEO_DIM GEO ON CN.REV_ROLLUP_ID = GEO.REV_ROLLUP_ID 
INNER JOIN DW_CAL_DT CAL ON CK.AUCT_START_DT < CAL.CAL_DT AND CK.AUCT_END_DT >= CAL.CAL_DT AND RETAIL_YEAR in (2020,2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
on ck.slr_id = u.user_id

-- left join (select a.* from (
-- select
-- item_id,
-- auct_end_dt,
-- lower(PRDCT_ASPCT_NM) as lcase_aspect_name,
-- upper(ASPCT_VLU_NM) as BRAND,
-- ROW_NUMBER() over  ( partition by  aspct.item_id, lcase_aspect_name order by lcase_aspect_name ) as RNum -- To avoid duplicate results, this condition partitions the attribute to to contain only 1 aspect value per attribute  
-- FROM ITEM_ASPCT_CLSSFCTN ASPCT
-- where 
-- lower(PRDCT_ASPCT_NM) in ('brand') and NS_TYPE_CD='df' )a
-- where RNum = 1
-- ) bbase
-- 					ON ck.ITEM_ID = bbase.ITEM_ID AND ck.AUCT_END_dt = bbase.AUCT_END_DT
	
	
-- left join (select a.* from (
-- select
-- item_id,
-- auct_end_dt,
-- lower(PRDCT_ASPCT_NM) as lcase_aspect_name,
-- upper(ASPCT_VLU_NM) as MODEL,
-- ROW_NUMBER() over  ( partition by  aspct.item_id, lcase_aspect_name order by lcase_aspect_name ) as RNum -- To avoid duplicate results, this condition partitions the attribute to to contain only 1 aspect value per attribute  
-- FROM ITEM_ASPCT_CLSSFCTN ASPCT
-- where 
-- lower(PRDCT_ASPCT_NM) in ('model') and NS_TYPE_CD='df' )a
-- where RNum = 1
-- ) bbase1
-- 					ON ck.ITEM_ID = bbase1.ITEM_ID AND ck.AUCT_END_dt = bbase1.AUCT_END_DT


INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = CK.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)   

WHERE 1=1
	AND  CK.AUCT_end_dt >= '2018-01-01'
and ck.WACKO_YN = 'N'                      
AND CK.AUCT_TYPE_CODE NOT IN (10,15)
AND CK.ITEM_SITE_ID in (3)
and ck.auct_end_dt >= date '2018-01-01'	
	AND cat.CATEG_LVL4_ID in (31387)
	and ck.slr_CNTRY_ID in (3)
		GROUP BY 1,2,3) );
		
		

---------------------------------------------------------------------------------------------------------------------------------------------------------
drop table if exists p_robevans_t.watches_wow ;

create table p_robevans_t.watches_wow as (select * from (select
retail_year,
retail_week,
	CASE
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
	CASE WHEN modified IN ('MODIFIED', 'CUSTOMIZED','YES') or upper(customised) = 'YES' THEN 'MODIFIED' ELSE 'NO' end AS MODIFIED_ITEM,
	case when (lower(ck.AUCT_TITL) like '%custom%' or lower(ck.AUCT_TITL) like '%modified%') then 'Modified/Customised Keyword in Title' else 'Other' End as modified_title_keyword,
	count(distinct slr_id) as Seller_Count,
	count(distinct ck.item_id) as LL

FROM DW_LSTG_ITEM AS CK
left join (Select
				item_id,
				Auct_end_dt,
				coalesce(max(aspct_vlu_nm),'Unknown') as MODIFIED
			FROM
				(select
					item_id,
					auct_end_dt,
					ns_type_cd,
					1 as priority,
					'MODIFIED' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
				from
					item_aspct_clssfctn
				where
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df'))
					and upper(prdct_aspct_nm) like ('%MODIFIED ITEM%')
				UNION ALL
				select
					item_id,
					auct_end_dt,
					ns_type_cd,
					2 as priority,
					'MODIFIED' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
				from
					item_aspct_clssfctn_cold
				WHERE
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df'))
					and upper(prdct_aspct_nm) like ('%MODIFIED ITEM%')
				)SB
			GROUP BY 1,2) modified ON ck.ITEM_ID = modified.ITEM_ID AND ck.AUCT_END_dt = modified.AUCT_END_DT
left join (Select
				item_id,
				Auct_end_dt,
				coalesce(max(aspct_vlu_nm),'Unknown') as CUSTOMISED
			FROM
				(select
					item_id,
					auct_end_dt,
					ns_type_cd,
					1 as priority,
					'CUSTOMISED' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
				from
					item_aspct_clssfctn
				where
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df'))
					and upper(prdct_aspct_nm) like ('%CUSTOMISED%')
				UNION ALL
				select
					item_id,
					auct_end_dt,
					ns_type_cd,
					2 as priority,
					'CUSTOMISED' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
				from
					item_aspct_clssfctn_cold
				WHERE
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df'))
					and upper(prdct_aspct_nm) like ('%CUSTOMISED%')
				)SB
			GROUP BY 1,2) customised ON ck.ITEM_ID = customised.ITEM_ID AND ck.AUCT_END_dt = customised.AUCT_END_DT

 LEFT JOIN ( select ITEM_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON CK.ITEM_ID = CNDTN.ITEM_ID
INNER JOIN DW_COUNTRIES CN ON CN.CNTRY_ID = CK.SLR_CNTRY_ID
INNER JOIN ACCESS_VIEWS.GLBL_RPRT_GEO_DIM GEO ON CN.REV_ROLLUP_ID = GEO.REV_ROLLUP_ID 
INNER JOIN DW_CAL_DT CAL ON CK.AUCT_START_DT < CAL.CAL_DT AND CK.AUCT_END_DT >= CAL.CAL_DT AND RETAIL_YEAR in (2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
on ck.slr_id = u.user_id

left join (select a.* from (
select
item_id,
auct_end_dt,
lower(PRDCT_ASPCT_NM) as lcase_aspect_name,
upper(ASPCT_VLU_NM) as BRAND,
ROW_NUMBER() over  ( partition by  aspct.item_id, lcase_aspect_name order by lcase_aspect_name ) as RNum -- To avoid duplicate results, this condition partitions the attribute to to contain only 1 aspect value per attribute  
FROM ITEM_ASPCT_CLSSFCTN ASPCT
where 
lower(PRDCT_ASPCT_NM) in ('brand') and NS_TYPE_CD='df' )a
where RNum = 1
) bbase
					ON ck.ITEM_ID = bbase.ITEM_ID AND ck.AUCT_END_dt = bbase.AUCT_END_DT
	
	
left join (select a.* from (
select
item_id,
auct_end_dt,
lower(PRDCT_ASPCT_NM) as lcase_aspect_name,
upper(ASPCT_VLU_NM) as MODEL,
ROW_NUMBER() over  ( partition by  aspct.item_id, lcase_aspect_name order by lcase_aspect_name ) as RNum -- To avoid duplicate results, this condition partitions the attribute to to contain only 1 aspect value per attribute  
FROM ITEM_ASPCT_CLSSFCTN ASPCT
where 
lower(PRDCT_ASPCT_NM) in ('model') and NS_TYPE_CD='df' )a
where RNum = 1
) bbase1
					ON ck.ITEM_ID = bbase1.ITEM_ID AND ck.AUCT_END_dt = bbase1.AUCT_END_DT


INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = CK.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)   

WHERE 1=1
AND CK.AUCT_end_dt >= '2018-01-01'
and ck.WACKO_YN = 'N'                      
AND CK.AUCT_TYPE_CODE NOT IN (10,15)
AND CK.ITEM_SITE_ID in (3)
AND cat.CATEG_LVL4_ID in (31387)
and ck.slr_CNTRY_ID in (3)
		GROUP BY 1,2,3,4,5,6) );


		--------------------------------------------------------------------------------------------------------------------------------------------------------


		drop table if exists p_robevans_t.watches_wow_gmv ;
create table p_robevans_t.watches_wow_gmv as (select * from (select
retail_year,
retail_week,
	CASE
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET,
	categ_lvl4_name,
	CASE WHEN CNDTN_ROLLUP_ID = 1 THEN 'New' WHEN CNDTN_ROLLUP_ID = 2 THEN 'Refurbished'  WHEN CNDTN_ROLLUP_ID = 3 THEN 'Used' ELSE 'Not Specified' END AS item_Cond,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
	CASE WHEN UPPER(BRND.ASPCT_VLU_NM_BRAND) in ('MODIFIED', 'CUSTOMIZED','YES') THEN 'MODIFIED' ELSE 'NO' end AS MODIFIED_ITEM,
	SUM(ck.gmv_plan_usd) AS GMV, 
	SUM(QUANTITY) AS BI,
	count(distinct (buyer_id)) as byr_cnt,
	count(distinct(ck.item_id)) as converted_lll,
	GMV/BI as ASP

FROM DW_CHECKOUT_TRANS AS ck

 LEFT JOIN ( select item_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON ck.ITEM_ID = CNDTN.ITEM_ID
LEFT JOIN 
                    (
                    SELECT ITEM_ID,
                           AUCT_END_DT,
                           COALESCE(MAX(ASPCT.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
                            FROM
                            ITEM_ASPCT_CLSSFCTN ASPCT
                            WHERE
                            UPPER(ASPCT.NS_TYPE_CD) IN ('NF','DF') 
                            AND ASPCT.AUCT_END_DT>='2018-12-26'
                            AND UPPER(ASPCT.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
                            GROUP BY 1,2
                            
                        UNION 
                        
                        SELECT  ITEM_ID,
                           AUCT_END_DT,
                          COALESCE(MAX(ASPCT_COLD.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
                        FROM
                        ITEM_ASPCT_CLSSFCTN_COLD ASPCT_COLD
                        WHERE UPPER(ASPCT_COLD.NS_TYPE_CD) IN ('NF','DF') 
                        AND ASPCT_COLD.AUCT_END_DT>='2018-12-26'
                        AND UPPER(ASPCT_COLD.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
                        GROUP BY 1,2
                    ) BRND ON CK.ITEM_ID = BRND.ITEM_ID AND CK.AUCT_END_DT = BRND.AUCT_END_DT

left join (Select
				item_id,
				Auct_end_dt,
				coalesce(max(case  when lower(aspect)=lower('BRAND') then aspct_vlu_nm else NULL end ),'Unknown') as BRAND
			FROM
				(select
					item_id,
					auct_end_dt,
					ns_type_cd,
					1 as priority,
					'BRAND' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
				from
					item_aspct_clssfctn
				where
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('BRAND')
				UNION ALL
				select
					item_id,
					auct_end_dt,
					ns_type_cd,
					2 as priority,
					'BRAND' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
				from
					item_aspct_clssfctn_cold
				WHERE
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('BRAND')
				)SB
			GROUP BY 1,2) bbase ON ck.ITEM_ID = bbase.ITEM_ID AND ck.AUCT_END_dt = bbase.AUCT_END_DT

left join (Select
				item_id,
				Auct_end_dt,
				coalesce(max(case  when lower(aspect)=lower('MODEL') then aspct_vlu_nm else NULL end ),'Unknown') as MODEL
			FROM
				(select
					item_id,
					auct_end_dt,
					ns_type_cd,
					1 as priority,
					'MODEL' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
				from
					item_aspct_clssfctn
				where
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('MODEL')
				UNION ALL
				select
					item_id,
					auct_end_dt,
					ns_type_cd,
					2 as priority,
					'MODEL' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
				from
					item_aspct_clssfctn_cold
				WHERE
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('MODEL')
				)SB1
			GROUP BY 1,2) bbase1 ON ck.ITEM_ID = bbase1.ITEM_ID AND ck.AUCT_END_dt = bbase1.AUCT_END_DT

		
-- inner  JOIN ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM LPR 
-- 	ON ck.LSTG_CURNCY_ID = LPR.CURNCY_ID 
INNER JOIN ACCESS_VIEWS.DW_CAL_DT CAL 
	ON CAL.CAL_DT = ck.gmv_dt 
	and retail_year >= 2019 and AGE_FOR_RTL_WEEK_ID <= -1 

left outer join dw_users u
	on ck.seller_id = u.user_id
	
INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = ck.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT in (5,7,41,23,-999)   

WHERE 1=1
AND CK.AUCT_end_dt >= '2018-01-01'
and ck.CK_WACKO_YN = 'N'                      
AND CK.SALE_TYPE NOT IN (10,15)
AND CK.SITE_ID in (3)
AND cat.CATEG_LVL4_ID in (31387)
and ck.slr_CNTRY_ID in (3)

GROUP BY 1,2,3,4,5,6,7)
-- 		where phase_flag not in ('Other')
		);
		


---------------------------------------------------------------------------------------------------------------------------------------------------------------
-- top 2021 listings 1 gmv

-- select * from  P_robevans_T.hb_item_gmv1a

drop table if exists P_robevans_T.watches_item_gmv1a;

CREATE TABLE P_robevans_T.watches_item_gmv1a AS

select
	ck.item_id, ck.AUCT_END_DT,
	SUM(ck.gmv_plan_usd) AS GMV

FROM DW_CHECKOUT_TRANS AS ck
-- inner  JOIN ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM LPR 
-- 	ON ck.LSTG_CURNCY_ID = LPR.CURNCY_ID 
LEFT JOIN  DW_LSTG_ITEM i on ck.item_id = i.item_id and ck.AUCT_END_DT = i.AUCT_END_DT
INNER JOIN ACCESS_VIEWS.DW_CAL_DT CAL 
	ON CAL.CAL_DT = ck.gmv_dt 
	and retail_year in (2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
	on ck.seller_id = u.user_id
INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = ck.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT in (5,7,41,23,-999)   

WHERE 1=1
	AND ck.ck_wacko_YN  =  'N'
	AND ck.SALE_TYPE NOT in (10,15)
	and ck.byr_cntry_id =3 
	and ck.ITEM_PRICE >= 1000
	and ck.SLR_CNTRY_ID = 3
	AND cat.CATEG_LVL4_ID in (31387)

	GROUP BY 1,2
	order by GMv DESC
	limit 2000


-- WITH DATA PRIMARY inDEX(seller_id, RETAIL_WEEK, RETAIL_YEAR, categ_lvl2_id);
;



---------------------------------------------------------------------------------------------------------------------------------------------------------------
-- top 2021 listings 2 gmv

-- select * from P_robevans_T.hb_item_gmv1

drop table if exists P_robevans_T.watches_item_gmv1;

CREATE TABLE P_robevans_T.watches_item_gmv1 AS

select
	cal.retail_year,
	cal.retail_week,
	seller_id,
	user_slctd_id,
	i.auct_titl,
	ck.item_id,
	categ_lvl3_id,
	CATEG_LVL3_NAME,
	categ_lvl4_name,
	categ_lvl4_id,
	CASE
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET,
	CASE WHEN CNDTN_ROLLUP_ID = 1 THEN 'New' WHEN CNDTN_ROLLUP_ID = 2 THEN 'Refurbished'  WHEN CNDTN_ROLLUP_ID = 3 THEN 'Used' ELSE 'Not Specified' END AS item_Cond,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
-- 	case when BYR_CNTRY_ID = 3 the 'UK' else 'International' end as buyer_location,
	SUM(ck.gmv_plan_usd) AS GMV, 
	count(DISTINCT BUYER_ID) as byr_cnt,
	SUM(QUANTITY) AS BI,
	count(distinct(ck.item_id)) as converted_lll,
	GMV/BI as ASP

FROM DW_CHECKOUT_TRANS AS ck
INNER JOIN (Select item_id,AUCT_END_DT from P_robevans_T.watches_item_gmv1a) a on a.item_id = ck.item_id and ck.AUCT_END_DT = a.AUCT_END_DT
 LEFT JOIN ( select item_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON ck.ITEM_ID = CNDTN.ITEM_ID
-- inner  JOIN ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM LPR 
-- 	ON ck.LSTG_CURNCY_ID = LPR.CURNCY_ID 
LEFT JOIN DW_LSTG_ITEM i on i.item_id = ck.item_id and i.AUCT_END_dt = ck.AUCT_END_DT
INNER JOIN ACCESS_VIEWS.DW_CAL_DT CAL 
	ON CAL.CAL_DT = ck.gmv_dt 
	and retail_year in (2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
	on ck.seller_id = u.user_id
INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = ck.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT in (5,7,41,23,-999)   

WHERE 1=1
	AND ck.ck_wacko_YN  =  'N'
	AND ck.SALE_TYPE NOT in (10,15)
	and ck.byr_cntry_id =3 
	and ck.SLR_CNTRY_ID = 3
AND cat.CATEG_LVL4_ID in (31387)

	GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13

	
-- WITH DATA PRIMARY inDEX(seller_id, RETAIL_WEEK, RETAIL_YEAR, categ_lvl2_id);
;

---------------------------------------------------------------------------------------------------------------------------------------------------------------
-- top sellers 1
drop table if exists P_robevans_T.watches_slr_gmv1;

CREATE TABLE P_robevans_T.watches_slr_gmv1 AS

select
	seller_id,
	SUM(CK.gmv_plan_usd) AS GMV

FROM DW_CHECKOUT_TRANS AS CK

-- inner  JOIN ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM LPR 
-- 	ON CK.LSTG_CURNCY_ID = LPR.CURNCY_ID 
INNER JOIN ACCESS_VIEWS.DW_CAL_DT CAL 
	ON CAL.CAL_DT = CK.gmv_dt 
	and retail_year in (2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
	on ck.seller_id = u.user_id
INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = CK.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)   

WHERE 1=1
	AND CK.CK_WACKO_YN  =  'N'
	AND CK.SALE_TYPE NOT IN (10,15)
-- 	and ck.byr_cntry_id =3 
	and ck.ITEM_PRICE >= 1000
	and ck.SLR_CNTRY_ID = 3
AND cat.CATEG_LVL4_ID in (31387)

	GROUP BY 1
	 order by GMV desc
	 limit 2000


	
-- WITH DATA PRIMARY INDEX(seller_id, RETAIL_WEEK, RETAIL_YEAR, categ_lvl2_id);
;


---------------------------------------------------------------------------------------------------------------------------------------------------------------
-- top sellers 2
drop table if exists P_robevans_T.watches_slr_gmv;

CREATE TABLE P_robevans_T.watches_slr_gmv AS

(select
	cal.retail_year,
	cal.retail_week,
	ck.seller_id,
	user_slctd_id,
	categ_lvl3_id,
	CATEG_LVL3_NAME,
	categ_lvl4_name,
	categ_lvl4_id,
	CASE
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.ITEM_PRICE AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET,
	CASE WHEN CNDTN_ROLLUP_ID = 1 THEN 'New' WHEN CNDTN_ROLLUP_ID = 2 THEN 'Refurbished'  WHEN CNDTN_ROLLUP_ID = 3 THEN 'Used' ELSE 'Not Specified' END AS Item_Cond,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
	case when BYR_CNTRY_ID = 3 then 'UK' else 'International' end as buyer_location,
	SUM(CK.gmv_plan_usd) AS GMV, 
	count(DISTINCT BUYER_ID) as byr_cnt,
	SUM(QUANTITY) AS BI,
	count(distinct(ck.item_id)) as converted_lll

FROM DW_CHECKOUT_TRANS AS CK

INNER JOIN (select selleR_id from  P_robevans_T.watches_slr_gmv1) as a on ck.seller_id = a.seller_id
 LEFT JOIN ( select ITEM_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON CK.ITEM_ID = CNDTN.ITEM_ID
-- inner  JOIN ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM LPR 
-- 	ON CK.LSTG_CURNCY_ID = LPR.CURNCY_ID 
INNER JOIN ACCESS_VIEWS.DW_CAL_DT CAL 
	ON CAL.CAL_DT = CK.gmv_dt 
	and retail_year in (2020,2021,2022) and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
	on ck.seller_id = u.user_id
INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = CK.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)   

WHERE 1=1
	AND CK.CK_WACKO_YN  =  'N'
	AND CK.SALE_TYPE NOT IN (10,15)
-- 	and ck.byr_cntry_id =3 
	and ck.SLR_CNTRY_ID = 3
AND cat.CATEG_LVL4_ID in (31387)

	GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12

) 
	
-- WITH DATA PRIMARY INDEX(seller_id, RETAIL_WEEK, RETAIL_YEAR, categ_lvl2_id);
;

		---------------------------------------------------------------------------------------------------------------------------------------------------------
		

drop table if exists p_robevans_t.watches_rolling13wks_ll ;

create table p_robevans_t.watches_rolling13wks_ll as (select * from (select
retail_year,
retail_week,
AGE_FOR_RTL_WEEK_ID,
	CASE
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
	CASE WHEN UPPER(BRND.ASPCT_VLU_NM_BRAND) IN ('MODIFIED', 'CUSTOMIZED','YES') THEN 'MODIFIED' ELSE 'NO' end AS MODIFIED_ITEM,
	count(distinct slr_id) as Seller_Count,
	count(distinct ck.item_id) as LL

FROM DW_LSTG_ITEM AS CK

        LEFT JOIN 
                    (
                    SELECT ITEM_ID,
                           AUCT_END_DT,
                           COALESCE(MAX(ASPCT.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
                            FROM
                            ITEM_ASPCT_CLSSFCTN ASPCT
                            WHERE
                            UPPER(ASPCT.NS_TYPE_CD) IN ('NF','DF') 
                            AND ASPCT.AUCT_END_DT>='2018-12-26'
                            AND UPPER(ASPCT.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
                            GROUP BY 1,2
                            
                        UNION 
                        
                        SELECT  ITEM_ID,
                           AUCT_END_DT,
                          COALESCE(MAX(ASPCT_COLD.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
                        FROM
                        ITEM_ASPCT_CLSSFCTN_COLD ASPCT_COLD
                        WHERE UPPER(ASPCT_COLD.NS_TYPE_CD) IN ('NF','DF') 
                        AND ASPCT_COLD.AUCT_END_DT>='2018-12-26'
                        AND UPPER(ASPCT_COLD.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
                        GROUP BY 1,2
                    ) BRND ON CK.ITEM_ID = BRND.ITEM_ID AND CK.AUCT_END_DT = BRND.AUCT_END_DT



 LEFT JOIN ( select ITEM_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON CK.ITEM_ID = CNDTN.ITEM_ID
INNER JOIN DW_COUNTRIES CN ON CN.CNTRY_ID = CK.SLR_CNTRY_ID
INNER JOIN ACCESS_VIEWS.GLBL_RPRT_GEO_DIM GEO ON CN.REV_ROLLUP_ID = GEO.REV_ROLLUP_ID 
INNER JOIN DW_CAL_DT CAL ON CK.AUCT_START_DT < CAL.CAL_DT AND CK.AUCT_END_DT >= CAL.CAL_DT - 90 and AGE_FOR_RTL_WEEK_ID in (-1,-53)
left outer join dw_users u
on ck.slr_id = u.user_id

left join (select a.* from (
select
item_id,
auct_end_dt,
lower(PRDCT_ASPCT_NM) as lcase_aspect_name,
upper(ASPCT_VLU_NM) as BRAND,
ROW_NUMBER() over  ( partition by  aspct.item_id, lcase_aspect_name order by lcase_aspect_name ) as RNum -- To avoid duplicate results, this condition partitions the attribute to to contain only 1 aspect value per attribute  
FROM ITEM_ASPCT_CLSSFCTN ASPCT
where 
lower(PRDCT_ASPCT_NM) in ('brand') and NS_TYPE_CD='df' )a
where RNum = 1
) bbase
					ON ck.ITEM_ID = bbase.ITEM_ID AND ck.AUCT_END_dt = bbase.AUCT_END_DT
	
	
left join (select a.* from (
select
item_id,
auct_end_dt,
lower(PRDCT_ASPCT_NM) as lcase_aspect_name,
upper(ASPCT_VLU_NM) as MODEL,
ROW_NUMBER() over  ( partition by  aspct.item_id, lcase_aspect_name order by lcase_aspect_name ) as RNum -- To avoid duplicate results, this condition partitions the attribute to to contain only 1 aspect value per attribute  
FROM ITEM_ASPCT_CLSSFCTN ASPCT
where 
lower(PRDCT_ASPCT_NM) in ('model') and NS_TYPE_CD='df' )a
where RNum = 1
) bbase1
					ON ck.ITEM_ID = bbase1.ITEM_ID AND ck.AUCT_END_dt = bbase1.AUCT_END_DT


INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = CK.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT IN (5,7,41,23,-999)   

WHERE 1=1
	AND  CK.AUCT_end_dt >= '2018-01-01'
and ck.WACKO_YN = 'N'                      
AND CK.AUCT_TYPE_CODE NOT IN (10,15)
AND CK.ITEM_SITE_ID in (3)
and ck.auct_end_dt >= date '2018-01-01'	
	AND cat.CATEG_LVL4_ID in (31387)
	and ck.slr_CNTRY_ID in (3)
		GROUP BY 1,2,3,4,5,6) );
		
		
		
		



------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------- Brand View --------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------


drop table if exists p_robevans_t.watches_wow_brands;

create table p_robevans_t.watches_wow_brands as



With brands as
(Select distinct brand

From
	(Select PRICE_BUCKET
	,brand
	,gmv
	,dense_rank() over (partition by price_bucket order by gmv desc) as price_ranking

	FROM
		(
		select brand
		,CASE
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET
		,sum(ck.gmv_plan_usd) as gmv


		FROM DW_CHECKOUT_TRANS AS ck
		left join (Select
						item_id,
						Auct_end_dt,
						coalesce(max(case  when lower(aspect)=lower('BRAND') then aspct_vlu_nm else NULL end ),'Unknown') as BRAND
					FROM
						(select
							item_id,
							auct_end_dt,
							ns_type_cd,
							1 as priority,
							'BRAND' as aspect,
							cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
						from
							item_aspct_clssfctn
						where
							AUCT_END_DT>='2016-06-01'
							AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('BRAND')
						UNION ALL
						select
							item_id,
							auct_end_dt,
							ns_type_cd,
							2 as priority,
							'BRAND' as aspect,
							cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
						from
							item_aspct_clssfctn_cold
						WHERE
							AUCT_END_DT>='2016-06-01'
							AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('BRAND')
						)SB
					GROUP BY 1,2) bbase ON ck.ITEM_ID = bbase.ITEM_ID AND ck.AUCT_END_dt = bbase.AUCT_END_DT

		INNER JOIN DW_CAL_DT CAL ON ck.GMV_DT = cal.CAL_DT AND AGE_FOR_RTL_WEEK_ID >= -52 and AGE_FOR_RTL_WEEK_ID <= -1
		LEFT JOIN dw_users u
			on ck.SELLER_ID = u.user_id
		INNER JOIN DW_CATEGORY_GROUPINGS CAT 
			ON CAT.LEAF_CATEG_ID = ck.LEAF_CATEG_ID 
			AND CAT.SITE_ID = 3
			AND CAT.SAP_CATEGORY_ID NOT in (5,7,41,23,-999)   

		WHERE 1=1
		AND ck.SITE_ID = 3
		and cat.CATEG_LVL4_ID in (31387)
		and ck.slr_CNTRY_ID = 3

		GROUP BY 1,2
		)
	Group by 1,2,3
	)
Where price_ranking <= 10
)



select
'LL' as target,
retail_year,
retail_week,
cal.AGE_FOR_RTL_WEEK_ID,
case when bbase.brand is not null then bbase.brand else 'Other' End as top_brands,
CASE
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.START_PRICE_LSTG_CURNCY AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET,
	case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
	CASE WHEN UPPER(BRND.ASPCT_VLU_NM_BRAND) in ('MODIFIED', 'CUSTOMIZED','YES') THEN 'MODIFIED' ELSE 'NO' end AS MODIFIED_ITEM,
	count(distinct ck.item_id) as LL,
	count(distinct slr_id) as Listers,
	0 as gmv,
	0 as si

FROM DW_LSTG_ITEM AS ck
LEFT JOIN 
                    (
                    SELECT ITEM_ID,
                           AUCT_END_DT,
                           COALESCE(MAX(ASPCT.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
                            FROM
                            ITEM_ASPCT_CLSSFCTN ASPCT
                            WHERE
                            UPPER(ASPCT.NS_TYPE_CD) IN ('NF','DF') 
                            AND ASPCT.AUCT_END_DT>='2018-12-26'
                            AND UPPER(ASPCT.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
                            GROUP BY 1,2
                            
                        UNION 
                        
                        SELECT  ITEM_ID,
                           AUCT_END_DT,
                          COALESCE(MAX(ASPCT_COLD.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
                        FROM
                        ITEM_ASPCT_CLSSFCTN_COLD ASPCT_COLD
                        WHERE UPPER(ASPCT_COLD.NS_TYPE_CD) IN ('NF','DF') 
                        AND ASPCT_COLD.AUCT_END_DT>='2018-12-26'
                        AND UPPER(ASPCT_COLD.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
                        GROUP BY 1,2
                    ) BRND ON CK.ITEM_ID = BRND.ITEM_ID AND CK.AUCT_END_DT = BRND.AUCT_END_DT

left join (select sb.*
			From
			(Select
				item_id,
				Auct_end_dt,
				coalesce(max(case  when lower(aspect)=lower('BRAND') then aspct_vlu_nm else NULL end ),'Unknown') as BRAND
			FROM
				(select
					item_id,
					auct_end_dt,
					ns_type_cd,
					1 as priority,
					'BRAND' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
				from
					item_aspct_clssfctn
				where
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('BRAND')
				UNION ALL
				select
					item_id,
					auct_end_dt,
					ns_type_cd,
					2 as priority,
					'BRAND' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
				from
					item_aspct_clssfctn_cold
				WHERE
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('BRAND')
				)
			GROUP BY 1,2) sb
			INNER JOIN brands on brands.brand = sb.brand
			) bbase ON ck.ITEM_ID = bbase.ITEM_ID AND ck.AUCT_END_dt = bbase.AUCT_END_DT

left join (Select
				item_id,
				Auct_end_dt,
				coalesce(max(case  when lower(aspect)=lower('MODEL') then aspct_vlu_nm else NULL end ),'Unknown') as MODEL
			FROM
				(select
					item_id,
					auct_end_dt,
					ns_type_cd,
					1 as priority,
					'MODEL' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
				from
					item_aspct_clssfctn
				where
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('MODEL')
				UNION ALL
				select
					item_id,
					auct_end_dt,
					ns_type_cd,
					2 as priority,
					'MODEL' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
				from
					item_aspct_clssfctn_cold
				WHERE
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('MODEL')
				)SB1
			GROUP BY 1,2) bbase1 ON ck.ITEM_ID = bbase1.ITEM_ID AND ck.AUCT_END_dt = bbase1.AUCT_END_DT

LEFT JOIN (select item_id, item_VRTN_ID  from LSTG_ITEM_VRTN group by 1,2) v on v.item_id = ck.item_id
LEFT JOIN (select item_id, count(ITEM_VRTN_ID) c  from LSTG_ITEM_VRTN group by 1) v1 on v1.item_id = ck.item_id
LEFT JOIN ( select item_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON ck.ITEM_ID = CNDTN.ITEM_ID
INNER JOIN DW_COUNTRIES CN ON CN.CNTRY_ID = ck.SLR_CNTRY_ID
INNER JOIN ACCESS_VIEWS.GLBL_RPRT_GEO_DIM GEO ON CN.REV_ROLLUP_ID = GEO.REV_ROLLUP_ID 
INNER JOIN DW_CAL_DT CAL ON ck.AUCT_START_DT < CAL.CAL_DT AND ck.AUCT_END_DT >= CAL.CAL_DT AND RETAIL_YEAR >= 2021  and AGE_FOR_RTL_WEEK_ID <= -1 
left outer join dw_users u
on ck.slr_id = u.user_id

INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = ck.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT in (5,7,41,23,-999)   

WHERE 1=1
	AND  ck.AUCT_end_dt >= '2018-01-01'
and ck.wacko_YN = 'N'                      
AND ck.AUCT_TYPE_CODE NOT in (10,15)
AND ck.ITEM_SITE_ID in (3)
and cat.CATEG_LVL4_ID in (31387)
and ck.slr_CNTRY_ID in (3)
GROUP BY 1,2,3,4,5,6,7,8


UNION ALL
		
		--------------------------------------------------------------------------------------------------------------------------------------------------------


select
'GMV' as target,
retail_year,
retail_week,
cal.AGE_FOR_RTL_WEEK_ID,
case when bbase.brand is not null then bbase.brand else 'Other' End as top_brands,
CASE
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 1000 THEN 'A. <1000'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 1500 THEN 'B. 1000-1500'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 2000 THEN 'C. 1500-2000'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 3000 THEN 'D. 2000-3000'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 5000 THEN 'E. 3000-5000'
		WHEN Cast(CK.item_price AS DECIMAL(18,2))  < 10000 THEN 'F. 5000-10,000'
		ELSE 'G.10,000+' END AS
	PRICE_BUCKET,
		case when U.USER_DSGNTN_ID=2  then 'B2C' else 'C2C' end as bus_flag,
	CASE WHEN UPPER(BRND.ASPCT_VLU_NM_BRAND) in ('MODIFIED', 'CUSTOMIZED','YES') THEN 'MODIFIED' ELSE 'NO' end AS MODIFIED_ITEM,
	0 as LL,
	0 as Listers,	
	SUM(ck.gmv_plan_usd) AS GMV, 
	SUM(QUANTITY) AS SI

FROM DW_CHECKOUT_TRANS AS ck

 LEFT JOIN ( select item_ID,CNDTN_ROLLUP_ID from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2 ) AS CNDTN
        ON ck.ITEM_ID = CNDTN.ITEM_ID
LEFT JOIN 
                    (
                    SELECT ITEM_ID,
                           AUCT_END_DT,
                           COALESCE(MAX(ASPCT.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
                            FROM
                            ITEM_ASPCT_CLSSFCTN ASPCT
                            WHERE
                            UPPER(ASPCT.NS_TYPE_CD) IN ('NF','DF') 
                            AND ASPCT.AUCT_END_DT>='2018-12-26'
                            AND UPPER(ASPCT.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
                            GROUP BY 1,2
                            
                        UNION 
                        
                        SELECT  ITEM_ID,
                           AUCT_END_DT,
                          COALESCE(MAX(ASPCT_COLD.ASPCT_VLU_NM),'UNKNOWN') AS ASPCT_VLU_NM_BRAND
                        FROM
                        ITEM_ASPCT_CLSSFCTN_COLD ASPCT_COLD
                        WHERE UPPER(ASPCT_COLD.NS_TYPE_CD) IN ('NF','DF') 
                        AND ASPCT_COLD.AUCT_END_DT>='2018-12-26'
                        AND UPPER(ASPCT_COLD.PRDCT_ASPCT_NM) LIKE ('%MODIFIED ITEM%')
                        GROUP BY 1,2
                    ) BRND ON CK.ITEM_ID = BRND.ITEM_ID AND CK.AUCT_END_DT = BRND.AUCT_END_DT

left join (select sb.*
			From
			(Select
				item_id,
				Auct_end_dt,
				coalesce(max(case  when lower(aspect)=lower('BRAND') then aspct_vlu_nm else NULL end ),'Unknown') as BRAND
			FROM
				(select
					item_id,
					auct_end_dt,
					ns_type_cd,
					1 as priority,
					'BRAND' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
				from
					item_aspct_clssfctn
				where
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('BRAND')
				UNION ALL
				select
					item_id,
					auct_end_dt,
					ns_type_cd,
					2 as priority,
					'BRAND' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
				from
					item_aspct_clssfctn_cold
				WHERE
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('BRAND')
				)
			GROUP BY 1,2) sb
			INNER JOIN brands on brands.brand = sb.brand
			) bbase ON ck.ITEM_ID = bbase.ITEM_ID AND ck.AUCT_END_dt = bbase.AUCT_END_DT

left join (Select
				item_id,
				Auct_end_dt,
				coalesce(max(case  when lower(aspect)=lower('MODEL') then aspct_vlu_nm else NULL end ),'Unknown') as MODEL
			FROM
				(select
					item_id,
					auct_end_dt,
					ns_type_cd,
					1 as priority,
					'MODEL' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm 
				from
					item_aspct_clssfctn
				where
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('MODEL')
				UNION ALL
				select
					item_id,
					auct_end_dt,
					ns_type_cd,
					2 as priority,
					'MODEL' as aspect,
					cast(trim(lower(aspct_vlu_nm)) as VARCHAR(350)) as aspct_vlu_nm
				from
					item_aspct_clssfctn_cold
				WHERE
					AUCT_END_DT>='2016-06-01'
					AND lower(ns_type_cd) in (lower('nf'),lower('df' ) ) and upper(prdct_aspct_nm)= upper('MODEL')
				)SB1
			GROUP BY 1,2) bbase1 ON ck.ITEM_ID = bbase1.ITEM_ID AND ck.AUCT_END_dt = bbase1.AUCT_END_DT

		
-- inner  JOIN ACCESS_VIEWS.SSA_CURNCY_PLAN_RATE_DIM LPR 
-- 	ON ck.LSTG_CURNCY_ID = LPR.CURNCY_ID 
INNER JOIN ACCESS_VIEWS.DW_CAL_DT CAL 
	ON CAL.CAL_DT = ck.gmv_dt 
	and retail_year >= 2021 and AGE_FOR_RTL_WEEK_ID <= -1 

left outer join dw_users u
	on ck.seller_id = u.user_id
	
INNER JOIN DW_CATEGORY_GROUPINGS CAT 
	ON CAT.LEAF_CATEG_ID = ck.LEAF_CATEG_ID 
	AND CAT.SITE_ID = 3
	AND CAT.SAP_CATEGORY_ID NOT in (5,7,41,23,-999)   

WHERE 1=1
	AND  ck.AUCT_end_dt >= '2018-01-01'                    
AND ck.SITE_ID in (3)
and cat.CATEG_LVL4_ID in (31387)
	and ck.slr_CNTRY_ID in (3)
		GROUP BY 1,2,3,4,5,6,7,8
		;
		




