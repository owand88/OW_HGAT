
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- I’m trying to find search data in the category
-- What I’d like to do is something similar to what we do in tab “KPI output” in the Tyre KPI file
-- For the search data, I’d like to get an idea of:
-- Tyre Sizes searched for in Category
-- No of LL we have of these searches (based on completed aspects)
-- Any other Sold Item / GMV / conversion metric you think would be relevant also would be great
-- We can provide this to brands / retailers as pure inventory gaps

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
-- 1. All search key words
--------------------------------------------------------------------------------------
Drop table  if exists P_InventoryPlanning_t.pa_searches_tyre;  
Create table         P_InventoryPlanning_t.pa_searches_tyre   as (
select    
	cal.age_for_rtl_week_id
	,cal.retail_year
	,cal.retail_week
	,cal.retail_wk_end_date
	,cat.adjusted_vertical
	,cat.categ_lvl2_name
	,cat.categ_lvl2_id
	,lower(src.query) as act_srch
	,count(*) as src_cnt 
	--,count(distinct  lstg.item_id ) listing
	--,sum(ck.tot_GMV) GMV
	--,sum(tot_BI) as BI
	--,sum(converted_lstg) conv_ll
	
	from  access_views.srch_cnvrsn_event_fact src       -- select * from access_views.srch_cnvrsn_event_fact src where 1=1  and session_start_dt >='2023-08-01' and site_id=3  limit 1000 

	inner join prs_restricted_v.slng_lstg_super_fact lstg 	on src.site_id=3     -- Select * from  prs_restricted_v.slng_lstg_super_fact    limit 100;                                                          
	and substring(src.items,1,instr(src.items,',')-1) = lstg.item_id--Assume the first item appears is the most relevant to the search input


	inner join (select new_vertical as adjusted_vertical,categ_lvl2_id,categ_lvl2_name,leaf_categ_id,move_to,site_id ,
	categ_lvl3_id,categ_lvl3_name,
	categ_lvl4_id,categ_lvl4_name
				from P_INVENTORYPLANNING_T.dw_category_groupings_adj
				group by 1,2,3,4,5,6,7,8,9,10  ) cat
	on lstg.leaf_categ_id=cat.leaf_categ_id
	and lstg.item_site_id=cat.site_id and cat.site_id=3
	and lstg.leaf_categ_id=cat.move_to

	inner join access_views.dw_cal_dt cal
	on src.session_start_dt = cal.cal_dt and cal.age_for_rtl_week_id between -4 and -1--observe last full 4 weeks trend
	where  cat.CATEG_LVL4_ID =179680 
	group by 1,2,3,4,5,6,7,8);
--------------------------------------------------------------------------------------	
-- 2. top key words
--------------------------------------------------------------------------------------
Drop table if exists P_InventoryPlanning_t.pa_searches_tyre_top_word ;
Create table P_InventoryPlanning_t.pa_searches_tyre_top_word as 
Select trim(REPLACE(act_srch, 'tyres', '')) as tyre_size_search,* from   P_InventoryPlanning_t.pa_searches_tyre where src_cnt >=500 ;
-- 244 
select * from  P_InventoryPlanning_t.pa_searches_tyre_top_word ;

/*
Drop table   P_InventoryPlanning_t.searches_tyre_summary ;
create table P_InventoryPlanning_t.searches_tyre_summary as 
select 
act_srch,
sum(src_cnt) src_cnt,
sum(listing) listing,
sum(conv_ll) conv_ll,
sum(GMV) GMV,
sum(BI) BI
from P_InventoryPlanning_t.searches_tyre_ll_gmv  
group by 1
order by 2 desc ;*/


Select * from   P_InventoryPlanning_t.searches_tyre_ll_gmv  limit 1000; 

 
 

 
---   P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second 
 
 select * from P_InventoryPlanning_t.searches_tyre_size_listing_count where listing >=1000 order by 3 desc ;
 
 select * from  P_InventoryPlanning_t.searches_tyre_summary
 where trim(act_srch) in ( select distinct  trim(tyre_size) from   P_InventoryPlanning_t.searches_tyre_size_listing_count  ) 
 and src_cnt >=4000
 
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -- 3 .------- weekly listing by tyre size---------
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Drop table if exists   P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_search ;
create table  P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_search as 
(
select distinct 
Retail_week,
attribute_1 as Tyre_width,
attribute_2 as Aspect_ratio,
attribute_3 as Rim_diameter,
attribute_4  as Load_Index,
attribute_5 as Speed_rating,
attribute_6 as Unit_quantity,
ifnull( Tyre_readiness_campaign,'N') as Tyre_readiness_campaign,
lst.Item_id,
lst.Slr_ID,
  U.USER_SLCTD_ID
  ---lst.AUCT_START_DT,
--  cal.retail_year,
 -- cal.retail_week,
 /*  CAT.meta_categ_id, 
	 CAT.CATEG_LVL2_ID, 
	 CAT.categ_lvl2_name, 
	  CAT.CATEG_LVL3_ID, 
	 CAT.categ_lvl3_name, 
	  CAT.CATEG_LVL4_ID, 
	 CAT.categ_lvl4_name*/
	 ----,site_id
from  DW_LSTG_ITEM lst --on ck.item_id=lst.item_id SELECT * FROM DW_LSTG_ITEM  WEHRE  slr_id =1077516705  and lst.AUCT_end_dt >= CURRENT_DATE
---inner join (select distinct seller_id from p_InventoryPlanning_t.tyres_install_sellers)  c on lst.slr_id=c.seller_id-- select * from   p_InventoryPlanning_t.tyres_install_sellers
left join ( select user_id, max( Tyre_readiness_campaign )  Tyre_readiness_campaign  from P_INVENTORYPLANNING_T.tableau_tyre_campaign_seller_flag group by 1 ) r on  lst.slr_id= r.user_id
left join (select
						upper(ASPCT_VLU_NM) as attribute_1,
						aspct.item_id,
						aspct.auct_end_dt,
						lower(PRDCT_ASPCT_NM) as lcase_aspect_name
						from
						ITEM_ASPCT_CLSSFCTN ASPCT
						where
						lower(PRDCT_ASPCT_NM) in ('tyre width' ) --and NS_TYPE_CD='df' -- Manufacturer Part Number
						 and  aspct.auct_end_dt  >=  date '2018-01-01' group by 1,2,3,4) abase
				ON lst.ITEM_ID = abase.ITEM_ID
		
				
				left join (select
						upper(ASPCT_VLU_NM) as attribute_2,
						aspct.item_id,
						aspct.auct_end_dt,
						lower(PRDCT_ASPCT_NM) as lcase_aspect_name
						from
						ITEM_ASPCT_CLSSFCTN ASPCT
						where
						lower(PRDCT_ASPCT_NM) in ('aspect ratio' )-- and NS_TYPE_CD='df' -- Manufacturer Part Number
						 and  aspct.auct_end_dt  >=  date '2018-01-01' group by 1,2,3,4) bbase
				ON lst.ITEM_ID = bbase.ITEM_ID
		left join (select
						upper(ASPCT_VLU_NM) as attribute_3,
						aspct.item_id,
						aspct.auct_end_dt,
						lower(PRDCT_ASPCT_NM) as lcase_aspect_name
						from
						ITEM_ASPCT_CLSSFCTN ASPCT
						where
						lower(PRDCT_ASPCT_NM) in ('rim diameter' )-- and NS_TYPE_CD='df'
						 and  aspct.auct_end_dt  >=  date '2018-01-01' group by 1,2,3,4) cbase
				ON lst.ITEM_ID = cbase.ITEM_ID
		
		
		-- 456
		
left join (select
						upper(ASPCT_VLU_NM) as attribute_4,
						aspct.item_id,
						aspct.auct_end_dt,
						lower(PRDCT_ASPCT_NM) as lcase_aspect_name
						from
						ITEM_ASPCT_CLSSFCTN ASPCT
						where
						lower(PRDCT_ASPCT_NM) in ('load index' ) --and NS_TYPE_CD='df' -- Manufacturer Part Number
						 and  aspct.auct_end_dt  >=  date '2018-01-01' group by 1,2,3,4) dbase
				ON lst.ITEM_ID = dbase.ITEM_ID
		
				
				left join (select
						upper(ASPCT_VLU_NM) as attribute_5,
						aspct.item_id,
						aspct.auct_end_dt,
						lower(PRDCT_ASPCT_NM) as lcase_aspect_name
						from
						ITEM_ASPCT_CLSSFCTN ASPCT
						where
						lower(PRDCT_ASPCT_NM) in ('speed rating' )-- and NS_TYPE_CD='df' -- Manufacturer Part Number
						 and  aspct.auct_end_dt  >=  date '2018-01-01' group by 1,2,3,4) ebase
				ON lst.ITEM_ID =ebase.ITEM_ID
		left join (select
						upper(ASPCT_VLU_NM) as attribute_6,
						aspct.item_id,
						aspct.auct_end_dt,
						lower(PRDCT_ASPCT_NM) as lcase_aspect_name
						from
						ITEM_ASPCT_CLSSFCTN ASPCT
						where
						lower(PRDCT_ASPCT_NM) in ('unit quantity' ) --and NS_TYPE_CD='df'
						 and  aspct.auct_end_dt  >=  date '2018-01-01' group by 1,2,3,4) fbase
				ON lst.ITEM_ID = fbase.ITEM_ID
INNER JOIN DW_CATEGORY_GROUPINGS CAT ON CAT.LEAF_CATEG_ID = lst.LEAF_CATEG_ID AND CAT.SITE_ID = lst.ITEM_SITE_ID and site_id =3
INNER JOIN  LSTG_ITEM_CNDTN COND ON COND.AUCT_END_DT = lst.AUCT_END_DT AND COND.ITEM_ID = lst.ITEM_ID  AND  COND.CNDTN_ROLLUP_ID =  1  
INNER JOIN (select CAL_DT,RETAIL_YEAR, Retail_week, AGE_FOR_RTL_WEEK_ID from DW_CAL_DT group by 1,2, 3, 4 ) CAL   ON Lst.AUCT_START_DT < CAL.CAL_DT AND Lst.AUCT_END_DT >= CAL.CAL_DT   and age_for_rtl_week_id  in ( -2,-1,0 )
left outer JOIN DW_USERs U ON U.USER_ID= lst.Slr_ID 
where lst.WACKO_YN = 'N'                      
AND lst.AUCT_TYPE_CODE NOT IN (10,15)
and lst.SLR_site_ID = 3 -- change country site id if needed 
and categ_lvl4_id in (179680)

 );-- 213191  select * from P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second limit 1000; 
             
drop table if exists P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_ouput_search; 
Create table  P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_ouput_search as  (
Select *, 
 case when  Tyre_width  in ('N/A','DOES NOT APPLY','NOT APPLICABLE') then 0  when Tyre_width is not null then 1 else 0 end as Tyre_width_flag	, 
 case when  Aspect_ratio in ('N/A','DOES NOT APPLY','NOT APPLICABLE') then 0  when Aspect_ratio is not null then 1 else 0 end as Aspect_ratio_flag	,
 case when  Rim_diameter in ('N/A','DOES NOT APPLY','NOT APPLICABLE') then 0 when Rim_diameter is not null then 1 else 0 end as Rim_diameter_flag,
    
 case when  Load_Index in ('N/A','DOES NOT APPLY','NOT APPLICABLE') then 0 when Load_Index is not null then 1 else 0 end as Load_Index_flag	,
 case when  Speed_rating in ('N/A','DOES NOT APPLY','NOT APPLICABLE') then 0  when Speed_rating is not null then 1 else 0 end as Speed_rating_flag	,
 case when  Unit_quantity in ('N/A','DOES NOT APPLY','NOT APPLICABLE') then 0 when Unit_quantity is not null then 1 else 0 end as Unit_quantity_flag
 from   ( 
select retail_week,
item_id, 
max( Slr_ID ) as Slr_ID,
max(USER_SLCTD_ID ) as USER_SLCTD_ID,
max( Tyre_readiness_campaign )  Tyre_readiness_campaign,
max(Tyre_width ) Tyre_width,
max(Aspect_ratio )  Aspect_ratio ,
max(Rim_diameter) Rim_diameter  ,
max(Load_Index ) Load_Index,
max(Speed_rating )  Speed_rating ,
max(Unit_quantity) Unit_quantity  
from   P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_search group by 1,2 ) sub 
);
select * from P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_ouput_search limit 1000;  

-- 4. listing for the searched tyre sizes

drop table  P_InventoryPlanning_t.searches_tyre_size_listing_count ;
create table P_InventoryPlanning_t.searches_tyre_size_listing_count as 
select retail_week, (TYRE_WIDTH_2||' ' ||ASPECT_RATIO_2||' '||RIM_DIAMETER_2) tyre_size,count(distinct item_id) listing  from (
Select 
SUBSTRING(TYRE_WIDTH,1,3) AS TYRE_WIDTH_2,
SUBSTRING(ASPECT_RATIO,1,2) AS ASPECT_RATIO_2,
RIGHT(RIM_DIAMETER,2) AS RIM_DIAMETER_2,*
 from   P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_search ) group by 1,2;
 -- 2317 
 select *  from  P_InventoryPlanning_t.searches_tyre_size_listing_count order by 3 desc  limit 1000;
 

 -- 5.   match the live listing to the top search size 
Drop table   P_InventoryPlanning_t.pa_searches_tyre_join_list ;
create table  P_InventoryPlanning_t.pa_searches_tyre_join_list as 
select a.*, b.listing from (
		select tyre_size_search,
		age_for_rtl_week_id,
		retail_year,
		retail_week,
		retail_wk_end_date,
		adjusted_vertical,
		categ_lvl2_name,
		categ_lvl2_id,
		act_srch,
		sum(src_cnt)  src_cnt
		 from  P_InventoryPlanning_t.pa_searches_tyre_top_word 
		 group by 1,2,3,4,5,6,7,8,9) A
left join  P_InventoryPlanning_t.searches_tyre_size_listing_count b
 		on a.tyre_size_search=b.tyre_size and a.retail_week=b.retail_week
 -- select * from P_InventoryPlanning_t.pa_searches_tyre_join_list where retail_week in ( 34,35)
 
-- 6. 
-- ASSIGN ITEM ID TO TYRE SIZE
drop table P_INVENTORYPLANNING_T.Tyre_size_item_id ; 
CREATE TABLE P_INVENTORYPLANNING_T.Tyre_size_item_id as 
SELECT distinct TYRE_SIZE, ITEM_ID FROM (
select  (TYRE_WIDTH_2||' ' ||ASPECT_RATIO_2||' '||RIM_DIAMETER_2) tyre_size,* from (
Select 
SUBSTRING(TYRE_WIDTH,1,3) AS TYRE_WIDTH_2,
SUBSTRING(ASPECT_RATIO,1,2) AS ASPECT_RATIO_2,
RIGHT(RIM_DIAMETER,2) AS RIM_DIAMETER_2,*
 from   P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_search ) ) ;
 select * from  P_INVENTORYPLANNING_T.Tyre_size_item_id  limit 1000 ;


-- 7. Use Superfact table to get conversion and GMV
Create table P_InventoryPlanning_t.pa_searches_tyre_conversion as 
Select 
Retail_year,
Retail_week,
tyre_size,
count(distinct ck.item_id) as converted_ll,
sum(GMV_PLAN_USD) AS GMV  ,                                      	
SUM(QUANTITY) AS SOLD_ITEMS	

FROM DW_CHECKOUT_TRANS AS CK-- select * from   PRS_restricted_V.SLNG_TRFC_SUPER_FACT where site_id =3 and CAL_DT >= date '2023-08-01'   limit 1000
INNER JOIN ACCESS_VIEWS.DW_CATEGORY_GROUPINGS AS CAT
        ON CK.LEAF_CATEG_ID = CAT.LEAF_CATEG_ID
        AND CK.SITE_ID = CAT.SITE_ID and cat.site_id = 3 
left outer join dw_users u on ck.seller_id = u.user_id

INNER JOIN ( select USEGM_GRP_ID,USEGM_ID,END_DATE,USER_ID,BEG_DATE from DW_USEGM_HIST where
        USEGM_GRP_ID = 48
        AND USEGM_ID = 206
        AND END_DATE >= '2015-12-30' group by 1,2,3,4,5   )AS HIST
        ON HIST.USER_ID = CK.SELLER_ID
        AND CK.gmv_dt BETWEEN HIST.BEG_DATE AND HIST.END_DATE
inner join dw_cal_dt cal on ck.GMV_DT = cal.cal_dt  and AGE_FOR_RTL_WEEK_ID <=-1 and AGE_FOR_RTL_WEEK_ID >= -4
 LEFT JOIN ( select ITEM_ID,CNDTN_ROLLUP_ID,item_cndtn_id from ACCESS_VIEWS.LSTG_ITEM_CNDTN group by 1,2,3 ) AS CNDTN
        ON CK.ITEM_ID = CNDTN.ITEM_ID
INNER JOIN ( SELECT DISTINCT ITEM_ID , tyre_size FROM   P_INVENTORYPLANNING_T.Tyre_size_item_id ) y on ck.item_id=y.item_id

    WHERE 1=1
and ck.site_id = 3 
 AND HIST.USEGM_ID = 206
and ck.GMV_DT >= date '2023-05-01'

GROUP BY 1,2,3;

-- 8 Combine Search, listing and conversion in one table
Create table  P_InventoryPlanning_t.pa_searches_tyre_output as 
Select a.*,
b.Converted_ll,
b.GMV,
b.Sold_Items  
From  P_InventoryPlanning_t.pa_searches_tyre_join_list       a 
Left join  P_InventoryPlanning_t.pa_searches_tyre_conversion b on a.tyre_size_search=b.tyre_size and a.retail_week=b.retail_week
;

select * from P_InventoryPlanning_t.pa_searches_tyre_output ;

-- 9 .
drop table if exists   P_InventoryPlanning_t.searches_tyre_size_listing_count_table ;
create table P_InventoryPlanning_t.searches_tyre_size_listing_count_table as 
select tyre_size, slr_id, user_slctd_id, count(distinct item_id) ll from (
select (TYRE_WIDTH_2||' ' ||ASPECT_RATIO_2||' '||RIM_DIAMETER_2) tyre_size ,* from (
Select 
SUBSTRING(TYRE_WIDTH,1,3) AS TYRE_WIDTH_2,
SUBSTRING(ASPECT_RATIO,1,2) AS ASPECT_RATIO_2,
RIGHT(RIM_DIAMETER,2) AS RIM_DIAMETER_2,*
 from    P_INVENTORYPLANNING_T.Tyre_heatmap_ll_second_search ) ) where retail_week =36 group by 1,2,3 ;
 -- 24339  
 Select count(*) from P_INVENTORYPLANNING_T.searches_tyre_size_listing_count_table 