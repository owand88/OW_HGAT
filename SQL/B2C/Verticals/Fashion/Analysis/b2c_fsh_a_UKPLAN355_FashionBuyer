/*
Jira: https://jirap.corp.ebay.com/browse/UKPLAN-355

Objective: Understand the type of buyer in fashion

Description: I'll be looking at age, gender, customer segmentation

*/
DROP TABLE IF EXISTS P_OLWAND_T.202305_Fashion_Buyer_Demographics;
CREATE TABLE P_OLWAND_T.202305_Fashion_Buyer_Demographics AS

select RETAIL_YEAR
,RETAIL_MONTH
,CONCAT(RETAIL_YEAR,'M',lpad(RETAIL_MONTH,2,'0')) as RETAIL_YEARMONTH
,NEW_VERTICAL
,META_CATEG_NAME
,CATEG_LVL2_NAME
,item_condition
,B2C_C2C
,coalesce(MACRO_CL_NAME,'99 No Segment') as Seller_Segment
,CBT_DOM
,case 
when customer_age >= 75 THEN '8 75 +'
when customer_age >= 65 THEN '7 65-74'
when customer_age >= 55 THEN '6 55-64'
when customer_age >= 45 THEN '5 45-54'
when customer_age >= 35 THEN '4 35-44'
when customer_age >= 25 THEN '3 25-34'
when customer_age >= 18 THEN '2 18-24'
when customer_age is not null then '1 Under 18' else '0 No Age Specified' end as age_band
,price_tranche
,gender
,count (DISTINCT SELLER_ID) as sellers
,count (distinct BUYER_ID) as buyers
,count (distinct item_id) as items
,sum (quantity) as BI
,sum(GMV20_PLAN) as GMV

from 
(select distinct
cal.RETAIL_YEAR
,cal.RTL_MONTH_OF_RTL_YEAR_ID as RETAIL_MONTH
,cat.NEW_VERTICAL
,cat.META_CATEG_NAME
,cat.CATEG_LVL2_NAME
,ck.B2C_C2C
,seg.MACRO_CL_NAME
,case when dna.DATE_OF_BIRTH is not null and dna.DATE_OF_BIRTH != 'DELETED' then floor(months_between(ck.GMV_DT,cast(dna.DATE_OF_BIRTH as date))/12) end as customer_age
,case when dna.USER_CNTRY_ID = 3 then 'DOM' else 'CBT' end as CBT_DOM
,case when dna.GNDR_TYPE_CD in ('M','F') then dna.GNDR_TYPE_CD else 'U' end as GENDER
,ck.SELLER_ID
,ck.BUYER_ID
,ck.ITEM_ID
,ck.QUANTITY
,ck.GMV20_PLAN
,case ck.item_cndtn_id when 1000 then 'New'
	  			when 1500 then 'New - Other'
	  			when 1750 then 'New - With defects'
	  			when 2000 then 'Refurb - Certified' 
	  			when 2010 then 'Refurb - Excellent'
	  			when 2020 then 'Refurb - Very Good'
	  			when 2030 then 'Refurb - Good'
	  			when 2500 then 'Refurb - Seller' 
				when 3000 then 'Used'
	  			when 4000 then 'Used - Very Good'
	  			when 5000 then 'Used - Good'
	  			when 6000 then 'Used - Acceptable'
	  			when 7000 then 'Used - For parts / not working'
	  			else 'Other' end as item_condition
,case   when ck.ITEM_PRICE_AMT*ck.LSTG_CURNCY_PLAN_RATE <= 10 then "0 - $10"
		when ck.ITEM_PRICE_AMT*ck.LSTG_CURNCY_PLAN_RATE <= 20 then "$10 - $20"
		when ck.ITEM_PRICE_AMT*ck.LSTG_CURNCY_PLAN_RATE <= 30 then "$20 - $30"
		when ck.ITEM_PRICE_AMT*ck.LSTG_CURNCY_PLAN_RATE <= 40 then "$30 - $40"
		when ck.ITEM_PRICE_AMT*ck.LSTG_CURNCY_PLAN_RATE <= 50 then "$40 - $50"
		when ck.ITEM_PRICE_AMT*ck.LSTG_CURNCY_PLAN_RATE <= 75 then "$50 - $75"
		when ck.ITEM_PRICE_AMT*ck.LSTG_CURNCY_PLAN_RATE <= 100 then "$75 - $100"
		when ck.ITEM_PRICE_AMT*ck.LSTG_CURNCY_PLAN_RATE <= 150 then "$100 - $150" else "$150+" end as price_tranche
from PRS_RESTRICTED_V.SLNG_TRANS_SUPER_FACT ck
inner join P_INVENTORYPLANNING_T.DW_CATEGORY_GROUPINGS_ADJ cat on ck.LEAF_CATEG_ID = cat.LEAF_CATEG_ID and cat.SITE_ID = 3
inner join ACCESS_VIEWS.dw_cal_dt cal on cal.CAL_DT = ck.GMV_DT
		and cal.AGE_FOR_RTL_MONTH_ID between -24 and -1
		

-- segmentation
left join ACCESS_VIEWS.LFSTG_CLSTR_PRMRY_USER seg on ck.BUYER_ID = seg.PRIMARY_USER_ID and ck.gmv_dt between seg.RCRD_EFF_START_DT and seg.RCRD_EFF_END_DT
-- demographics
left join PRS_SECURE_V.USER_DNA_DIM dna on ck.BUYER_ID = dna.user_id

where 1=1
and ck.SITE_ID = 3 -- uk site
and ck.SLR_CNTRY_ID = 3 -- uk sellers
AND CK.CK_WACKO_YN  =  'N'
AND CK.SALE_TYPE NOT IN (10,15)
and ck.META_CATEG_ID = 11450 --Clothes, Shoes and Accessories
)
group by 1,2,3,4,5,6,7,8,9,10,11,12,13
;
select ck.CK_TRANS_ID
,count(distinct ck.ITEM_ID) as items
,sum(ck.QUANTITY) as quantity
,sum(ck.GMV20_PLAN) as gmv
from PRS_RESTRICTED_V.SLNG_TRANS_SUPER_FACT ck
inner join P_INVENTORYPLANNING_T.DW_CATEGORY_GROUPINGS_ADJ cat on ck.LEAF_CATEG_ID = cat.LEAF_CATEG_ID and cat.SITE_ID = 3
inner join ACCESS_VIEWS.dw_cal_dt cal on cal.CAL_DT = ck.GMV_DT
		and cal.AGE_FOR_RTL_YEAR_ID >=0 and cal.AGE_FOR_MONTH_ID <= -1
where TRANSACTION_ID > 0
group by 1
having count(distinct ck.ITEM_ID) > 1


;
select *
from PRS_RESTRICTED_V.SLNG_TRANS_SUPER_FACT
where 1=1
and SITE_ID = 3
and CK_WACKO_YN = 'N'
limit 10;

select *
from PRS_RESTRICTED_V.SLNG_TRANS_SUPER_FACT
where 1=1
and SITE_ID = 3
and CK_WACKO_YN = 'N'
and BUYER_ID = 2280024621
and gmv_dt >= '2023-03-01'
;

select *
from DW_USERS_INFO
where USER_ID in (
589837077,
2280024621,
272523261)

